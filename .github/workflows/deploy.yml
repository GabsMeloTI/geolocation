name: "[DEPLOY] Docker Build and Deploy"

on:
  push:
    branches:
      - main
      - develop
      - homolog

jobs:
  deploy-to-ec2-main:
    name: Deploy to EC2 (main)
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Conectar ao EC2 e atualizar com Docker Compose
        env:
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            cd /home/ubuntu/projects/geolocation

            echo "Atualizando código..."
            git fetch --all
            git checkout main
            git pull origin main

            echo "Recriando container do MAIN..."
            docker compose up -d --build --force-recreate go-geolocation

            docker image prune -f
            echo "Deploy concluído!"
          EOF

          rm -f private_key.pem

  deploy-to-ec2-develop:
    name: Deploy to EC2 (develop)
    runs-on: ubuntu-latest
    if: github.ref_name == 'develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Conectar ao EC2 e atualizar com Docker Compose
        env:
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            cd /home/ubuntu/projects/geolocation

            echo "Atualizando código..."
            git fetch --all
            git checkout develop
            git pull origin develop

            echo "Recriando container do DEVELOP..."
            docker compose up -d --build --force-recreate go-geolocation-dev

            docker image prune -f
            echo "Deploy concluído!"
          EOF
          
          rm -f private_key.pem

  deploy-to-ec2-homolog:
    name: Deploy to EC2 (homolog)
    runs-on: ubuntu-latest
    if: github.ref_name == 'homolog'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Conectar ao EC2 e atualizar com Docker Compose
        env:
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            cd /home/ubuntu/projects/geolocation

            echo "Atualizando código..."
            git fetch --all
            git checkout homolog
            git pull origin homolog

            echo "Recriando container do HOMOLOG..."
            docker compose up -d --build --force-recreate go-geolocation-homolog

            docker image prune -f
            echo "Deploy concluído!"
          EOF
          
          rm -f private_key.pem
