// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: advertisement.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const countAdvertisementByUserID = `-- name: CountAdvertisementByUserID :one
SELECT COUNT(*)
FROM public.advertisement
WHERE user_id = $1
  AND status = true AND destination_lat IS NOT NULL AND destination_lng IS NOT NULL AND origin_lat IS NOT NULL AND origin_lng IS NOT NULL AND situation = 'ativo'
`

func (q *Queries) CountAdvertisementByUserID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAdvertisementByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdvertisement = `-- name: CreateAdvertisement :one
INSERT INTO public.advertisement
(id, user_id, destination, origin, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer,
 requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, state_origin, city_origin, complement_origin, neighborhood_origin, street_origin, street_number_origin,
 cep_origin, state_destination, city_destination, complement_destination, neighborhood_destination, street_destination, street_number_destination, cep_destination)
VALUES(nextval('advertisement_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9,
       $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, 'pendente', $21,
       true, now(),$22,$23, $24, $25, $26, $27,$28, $29, $30, $31,
       $32, $33, $34,$35, $36)
    RETURNING id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, state_origin, city_origin, complement_origin, neighborhood_origin, street_origin, street_number_origin, cep_origin, state_destination, city_destination, complement_destination, neighborhood_destination, street_destination, street_number_destination, cep_destination, status, created_at, created_who, updated_at, updated_who
`

type CreateAdvertisementParams struct {
	UserID                  int64     `json:"user_id"`
	Destination             string    `json:"destination"`
	Origin                  string    `json:"origin"`
	Distance                int64     `json:"distance"`
	PickupDate              time.Time `json:"pickup_date"`
	DeliveryDate            time.Time `json:"delivery_date"`
	ExpirationDate          time.Time `json:"expiration_date"`
	Title                   string    `json:"title"`
	CargoType               string    `json:"cargo_type"`
	CargoSpecies            string    `json:"cargo_species"`
	CargoWeight             float64   `json:"cargo_weight"`
	VehiclesAccepted        string    `json:"vehicles_accepted"`
	Trailer                 string    `json:"trailer"`
	RequiresTarp            bool      `json:"requires_tarp"`
	Tracking                bool      `json:"tracking"`
	Agency                  bool      `json:"agency"`
	Description             string    `json:"description"`
	PaymentType             string    `json:"payment_type"`
	Advance                 string    `json:"advance"`
	Toll                    bool      `json:"toll"`
	Price                   float64   `json:"price"`
	CreatedWho              string    `json:"created_who"`
	StateOrigin             string    `json:"state_origin"`
	CityOrigin              string    `json:"city_origin"`
	ComplementOrigin        string    `json:"complement_origin"`
	NeighborhoodOrigin      string    `json:"neighborhood_origin"`
	StreetOrigin            string    `json:"street_origin"`
	StreetNumberOrigin      string    `json:"street_number_origin"`
	CepOrigin               string    `json:"cep_origin"`
	StateDestination        string    `json:"state_destination"`
	CityDestination         string    `json:"city_destination"`
	ComplementDestination   string    `json:"complement_destination"`
	NeighborhoodDestination string    `json:"neighborhood_destination"`
	StreetDestination       string    `json:"street_destination"`
	StreetNumberDestination string    `json:"street_number_destination"`
	CepDestination          string    `json:"cep_destination"`
}

func (q *Queries) CreateAdvertisement(ctx context.Context, arg CreateAdvertisementParams) (Advertisement, error) {
	row := q.db.QueryRowContext(ctx, createAdvertisement,
		arg.UserID,
		arg.Destination,
		arg.Origin,
		arg.Distance,
		arg.PickupDate,
		arg.DeliveryDate,
		arg.ExpirationDate,
		arg.Title,
		arg.CargoType,
		arg.CargoSpecies,
		arg.CargoWeight,
		arg.VehiclesAccepted,
		arg.Trailer,
		arg.RequiresTarp,
		arg.Tracking,
		arg.Agency,
		arg.Description,
		arg.PaymentType,
		arg.Advance,
		arg.Toll,
		arg.Price,
		arg.CreatedWho,
		arg.StateOrigin,
		arg.CityOrigin,
		arg.ComplementOrigin,
		arg.NeighborhoodOrigin,
		arg.StreetOrigin,
		arg.StreetNumberOrigin,
		arg.CepOrigin,
		arg.StateDestination,
		arg.CityDestination,
		arg.ComplementDestination,
		arg.NeighborhoodDestination,
		arg.StreetDestination,
		arg.StreetNumberDestination,
		arg.CepDestination,
	)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.StateOrigin,
		&i.CityOrigin,
		&i.ComplementOrigin,
		&i.NeighborhoodOrigin,
		&i.StreetOrigin,
		&i.StreetNumberOrigin,
		&i.CepOrigin,
		&i.StateDestination,
		&i.CityDestination,
		&i.ComplementDestination,
		&i.NeighborhoodDestination,
		&i.StreetDestination,
		&i.StreetNumberDestination,
		&i.CepDestination,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const createAdvertisementRoute = `-- name: CreateAdvertisementRoute :one
INSERT INTO public.advertisement_route
(id, advertisement_id, route_hist_id, user_id, route_choose, created_at)
VALUES(nextval('advertisement_route_id_seq'::regclass), $1, $2, $3, $4, now())
    RETURNING id, advertisement_id, route_hist_id, user_id, route_choose, created_at
`

type CreateAdvertisementRouteParams struct {
	AdvertisementID int64 `json:"advertisement_id"`
	RouteHistID     int64 `json:"route_hist_id"`
	UserID          int64 `json:"user_id"`
	RouteChoose     int64 `json:"route_choose"`
}

func (q *Queries) CreateAdvertisementRoute(ctx context.Context, arg CreateAdvertisementRouteParams) (AdvertisementRoute, error) {
	row := q.db.QueryRowContext(ctx, createAdvertisementRoute,
		arg.AdvertisementID,
		arg.RouteHistID,
		arg.UserID,
		arg.RouteChoose,
	)
	var i AdvertisementRoute
	err := row.Scan(
		&i.ID,
		&i.AdvertisementID,
		&i.RouteHistID,
		&i.UserID,
		&i.RouteChoose,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdvertisement = `-- name: DeleteAdvertisement :exec
UPDATE public.advertisement
SET status=false, updated_at=now(), updated_who=$3
WHERE id=$1 and
    user_id=$2
`

type DeleteAdvertisementParams struct {
	ID         int64          `json:"id"`
	UserID     int64          `json:"user_id"`
	UpdatedWho sql.NullString `json:"updated_who"`
}

func (q *Queries) DeleteAdvertisement(ctx context.Context, arg DeleteAdvertisementParams) error {
	_, err := q.db.ExecContext(ctx, deleteAdvertisement, arg.ID, arg.UserID, arg.UpdatedWho)
	return err
}

const getAdvertisementById = `-- name: GetAdvertisementById :one
SELECT id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, state_origin, city_origin, complement_origin, neighborhood_origin, street_origin, street_number_origin, cep_origin, state_destination, city_destination, complement_destination, neighborhood_destination, street_destination, street_number_destination, cep_destination, status, created_at, created_who, updated_at, updated_who
FROM public.advertisement
WHERE id=$1 AND
    status=true
`

func (q *Queries) GetAdvertisementById(ctx context.Context, id int64) (Advertisement, error) {
	row := q.db.QueryRowContext(ctx, getAdvertisementById, id)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.StateOrigin,
		&i.CityOrigin,
		&i.ComplementOrigin,
		&i.NeighborhoodOrigin,
		&i.StreetOrigin,
		&i.StreetNumberOrigin,
		&i.CepOrigin,
		&i.StateDestination,
		&i.CityDestination,
		&i.ComplementDestination,
		&i.NeighborhoodDestination,
		&i.StreetDestination,
		&i.StreetNumberDestination,
		&i.CepDestination,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const getAllAdvertisementPublic = `-- name: GetAllAdvertisementPublic :many
SELECT id, user_id, destination, origin, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, created_at,
       state_origin, city_origin, complement_origin, neighborhood_origin, street_origin, street_number_origin, cep_origin,
       state_destination, city_destination, complement_destination, neighborhood_destination, street_destination, street_number_destination, cep_destination
FROM public.advertisement
WHERE status=true AND destination_lat IS NOT NULL AND destination_lng IS NOT NULL AND origin_lat IS NOT NULL AND origin_lng IS NOT NULL
ORDER BY expiration_date
`

type GetAllAdvertisementPublicRow struct {
	ID                      int64     `json:"id"`
	UserID                  int64     `json:"user_id"`
	Destination             string    `json:"destination"`
	Origin                  string    `json:"origin"`
	PickupDate              time.Time `json:"pickup_date"`
	DeliveryDate            time.Time `json:"delivery_date"`
	ExpirationDate          time.Time `json:"expiration_date"`
	Title                   string    `json:"title"`
	CargoType               string    `json:"cargo_type"`
	CargoSpecies            string    `json:"cargo_species"`
	CargoWeight             float64   `json:"cargo_weight"`
	VehiclesAccepted        string    `json:"vehicles_accepted"`
	Trailer                 string    `json:"trailer"`
	RequiresTarp            bool      `json:"requires_tarp"`
	Tracking                bool      `json:"tracking"`
	Agency                  bool      `json:"agency"`
	Description             string    `json:"description"`
	PaymentType             string    `json:"payment_type"`
	Advance                 string    `json:"advance"`
	Toll                    bool      `json:"toll"`
	Situation               string    `json:"situation"`
	CreatedAt               time.Time `json:"created_at"`
	StateOrigin             string    `json:"state_origin"`
	CityOrigin              string    `json:"city_origin"`
	ComplementOrigin        string    `json:"complement_origin"`
	NeighborhoodOrigin      string    `json:"neighborhood_origin"`
	StreetOrigin            string    `json:"street_origin"`
	StreetNumberOrigin      string    `json:"street_number_origin"`
	CepOrigin               string    `json:"cep_origin"`
	StateDestination        string    `json:"state_destination"`
	CityDestination         string    `json:"city_destination"`
	ComplementDestination   string    `json:"complement_destination"`
	NeighborhoodDestination string    `json:"neighborhood_destination"`
	StreetDestination       string    `json:"street_destination"`
	StreetNumberDestination string    `json:"street_number_destination"`
	CepDestination          string    `json:"cep_destination"`
}

func (q *Queries) GetAllAdvertisementPublic(ctx context.Context) ([]GetAllAdvertisementPublicRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdvertisementPublic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdvertisementPublicRow
	for rows.Next() {
		var i GetAllAdvertisementPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Destination,
			&i.Origin,
			&i.PickupDate,
			&i.DeliveryDate,
			&i.ExpirationDate,
			&i.Title,
			&i.CargoType,
			&i.CargoSpecies,
			&i.CargoWeight,
			&i.VehiclesAccepted,
			&i.Trailer,
			&i.RequiresTarp,
			&i.Tracking,
			&i.Agency,
			&i.Description,
			&i.PaymentType,
			&i.Advance,
			&i.Toll,
			&i.Situation,
			&i.CreatedAt,
			&i.StateOrigin,
			&i.CityOrigin,
			&i.ComplementOrigin,
			&i.NeighborhoodOrigin,
			&i.StreetOrigin,
			&i.StreetNumberOrigin,
			&i.CepOrigin,
			&i.StateDestination,
			&i.CityDestination,
			&i.ComplementDestination,
			&i.NeighborhoodDestination,
			&i.StreetDestination,
			&i.StreetNumberDestination,
			&i.CepDestination,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAdvertisementUsers = `-- name: GetAllAdvertisementUsers :many
SELECT a.id, a.user_id, u.name as user_name, u.created_at as active_there, u.city as user_city, u.state as user_state, u.phone as user_phone, u.email as user_email, u.profile_picture as user_profile_picture,
       a.destination, a.origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, a.created_at, created_who, a.updated_at, updated_who,
       a.state_origin, a.city_origin, a.complement_origin, a.neighborhood_origin, a.street_origin, a.street_number_origin, a.cep_origin,
       a.state_destination, a.city_destination, a.complement_destination, a.neighborhood_destination, a.street_destination, a.street_number_destination, a.cep_destination, rh.response as response_routes, ar.route_choose
FROM public.advertisement a
         INNER JOIN users u ON u.id = a.user_id
         left JOIN advertisement_route ar on a.id = ar.advertisement_id
         left JOIN route_hist rh on rh.id = ar.route_hist_id
WHERE a.status=true AND destination_lat IS NOT NULL AND destination_lng IS NOT NULL AND origin_lat IS NOT NULL AND origin_lng IS NOT NULL
ORDER BY expiration_date
`

type GetAllAdvertisementUsersRow struct {
	ID                      int64                 `json:"id"`
	UserID                  int64                 `json:"user_id"`
	UserName                string                `json:"user_name"`
	ActiveThere             sql.NullTime          `json:"active_there"`
	UserCity                sql.NullString        `json:"user_city"`
	UserState               sql.NullString        `json:"user_state"`
	UserPhone               sql.NullString        `json:"user_phone"`
	UserEmail               string                `json:"user_email"`
	UserProfilePicture      sql.NullString        `json:"user_profile_picture"`
	Destination             string                `json:"destination"`
	Origin                  string                `json:"origin"`
	DestinationLat          sql.NullFloat64       `json:"destination_lat"`
	DestinationLng          sql.NullFloat64       `json:"destination_lng"`
	OriginLat               sql.NullFloat64       `json:"origin_lat"`
	OriginLng               sql.NullFloat64       `json:"origin_lng"`
	Distance                int64                 `json:"distance"`
	PickupDate              time.Time             `json:"pickup_date"`
	DeliveryDate            time.Time             `json:"delivery_date"`
	ExpirationDate          time.Time             `json:"expiration_date"`
	Title                   string                `json:"title"`
	CargoType               string                `json:"cargo_type"`
	CargoSpecies            string                `json:"cargo_species"`
	CargoWeight             float64               `json:"cargo_weight"`
	VehiclesAccepted        string                `json:"vehicles_accepted"`
	Trailer                 string                `json:"trailer"`
	RequiresTarp            bool                  `json:"requires_tarp"`
	Tracking                bool                  `json:"tracking"`
	Agency                  bool                  `json:"agency"`
	Description             string                `json:"description"`
	PaymentType             string                `json:"payment_type"`
	Advance                 string                `json:"advance"`
	Toll                    bool                  `json:"toll"`
	Situation               string                `json:"situation"`
	Price                   float64               `json:"price"`
	CreatedAt               time.Time             `json:"created_at"`
	CreatedWho              string                `json:"created_who"`
	UpdatedAt               sql.NullTime          `json:"updated_at"`
	UpdatedWho              sql.NullString        `json:"updated_who"`
	StateOrigin             string                `json:"state_origin"`
	CityOrigin              string                `json:"city_origin"`
	ComplementOrigin        string                `json:"complement_origin"`
	NeighborhoodOrigin      string                `json:"neighborhood_origin"`
	StreetOrigin            string                `json:"street_origin"`
	StreetNumberOrigin      string                `json:"street_number_origin"`
	CepOrigin               string                `json:"cep_origin"`
	StateDestination        string                `json:"state_destination"`
	CityDestination         string                `json:"city_destination"`
	ComplementDestination   string                `json:"complement_destination"`
	NeighborhoodDestination string                `json:"neighborhood_destination"`
	StreetDestination       string                `json:"street_destination"`
	StreetNumberDestination string                `json:"street_number_destination"`
	CepDestination          string                `json:"cep_destination"`
	ResponseRoutes          json.RawMessage `json:"response_routes"`
	RouteChoose             sql.NullInt64         `json:"route_choose"`
}

func (q *Queries) GetAllAdvertisementUsers(ctx context.Context) ([]GetAllAdvertisementUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdvertisementUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdvertisementUsersRow
	for rows.Next() {
		var i GetAllAdvertisementUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserName,
			&i.ActiveThere,
			&i.UserCity,
			&i.UserState,
			&i.UserPhone,
			&i.UserEmail,
			&i.UserProfilePicture,
			&i.Destination,
			&i.Origin,
			&i.DestinationLat,
			&i.DestinationLng,
			&i.OriginLat,
			&i.OriginLng,
			&i.Distance,
			&i.PickupDate,
			&i.DeliveryDate,
			&i.ExpirationDate,
			&i.Title,
			&i.CargoType,
			&i.CargoSpecies,
			&i.CargoWeight,
			&i.VehiclesAccepted,
			&i.Trailer,
			&i.RequiresTarp,
			&i.Tracking,
			&i.Agency,
			&i.Description,
			&i.PaymentType,
			&i.Advance,
			&i.Toll,
			&i.Situation,
			&i.Price,
			&i.CreatedAt,
			&i.CreatedWho,
			&i.UpdatedAt,
			&i.UpdatedWho,
			&i.StateOrigin,
			&i.CityOrigin,
			&i.ComplementOrigin,
			&i.NeighborhoodOrigin,
			&i.StreetOrigin,
			&i.StreetNumberOrigin,
			&i.CepOrigin,
			&i.StateDestination,
			&i.CityDestination,
			&i.ComplementDestination,
			&i.NeighborhoodDestination,
			&i.StreetDestination,
			&i.StreetNumberDestination,
			&i.CepDestination,
			&i.ResponseRoutes,
			&i.RouteChoose,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdvertisement = `-- name: UpdateAdvertisement :one
UPDATE public.advertisement
SET destination=$2, origin=$3, destination_lat=$4, destination_lng=$5, origin_lat=$6, origin_lng=$7, distance=$8, pickup_date=$9, delivery_date=$10, expiration_date=$11, title=$12,
    cargo_type=$13, cargo_species=$14, cargo_weight=$15, vehicles_accepted=$16, trailer=$17, requires_tarp=$18, tracking=$19, agency=$20, description=$21, payment_type=$22, advance=$23, toll=$24, situation=$25, price=$26, updated_at=now(), updated_who=$27,
    state_origin=$28, city_origin=$29, complement_origin=$30, neighborhood_origin=$31, street_origin=$32, street_number_origin=$33, cep_origin=$34,
    state_destination=$35, city_destination=$36, complement_destination=$37, neighborhood_destination=$38, street_destination=$39, street_number_destination=$40, cep_destination=$41
WHERE user_id=$1 AND
    id=$42
    RETURNING id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, state_origin, city_origin, complement_origin, neighborhood_origin, street_origin, street_number_origin, cep_origin, state_destination, city_destination, complement_destination, neighborhood_destination, street_destination, street_number_destination, cep_destination, status, created_at, created_who, updated_at, updated_who
`

type UpdateAdvertisementParams struct {
	UserID                  int64           `json:"user_id"`
	Destination             string          `json:"destination"`
	Origin                  string          `json:"origin"`
	DestinationLat          sql.NullFloat64 `json:"destination_lat"`
	DestinationLng          sql.NullFloat64 `json:"destination_lng"`
	OriginLat               sql.NullFloat64 `json:"origin_lat"`
	OriginLng               sql.NullFloat64 `json:"origin_lng"`
	Distance                int64           `json:"distance"`
	PickupDate              time.Time       `json:"pickup_date"`
	DeliveryDate            time.Time       `json:"delivery_date"`
	ExpirationDate          time.Time       `json:"expiration_date"`
	Title                   string          `json:"title"`
	CargoType               string          `json:"cargo_type"`
	CargoSpecies            string          `json:"cargo_species"`
	CargoWeight             float64         `json:"cargo_weight"`
	VehiclesAccepted        string          `json:"vehicles_accepted"`
	Trailer                 string          `json:"trailer"`
	RequiresTarp            bool            `json:"requires_tarp"`
	Tracking                bool            `json:"tracking"`
	Agency                  bool            `json:"agency"`
	Description             string          `json:"description"`
	PaymentType             string          `json:"payment_type"`
	Advance                 string          `json:"advance"`
	Toll                    bool            `json:"toll"`
	Situation               string          `json:"situation"`
	Price                   float64         `json:"price"`
	UpdatedWho              sql.NullString  `json:"updated_who"`
	StateOrigin             string          `json:"state_origin"`
	CityOrigin              string          `json:"city_origin"`
	ComplementOrigin        string          `json:"complement_origin"`
	NeighborhoodOrigin      string          `json:"neighborhood_origin"`
	StreetOrigin            string          `json:"street_origin"`
	StreetNumberOrigin      string          `json:"street_number_origin"`
	CepOrigin               string          `json:"cep_origin"`
	StateDestination        string          `json:"state_destination"`
	CityDestination         string          `json:"city_destination"`
	ComplementDestination   string          `json:"complement_destination"`
	NeighborhoodDestination string          `json:"neighborhood_destination"`
	StreetDestination       string          `json:"street_destination"`
	StreetNumberDestination string          `json:"street_number_destination"`
	CepDestination          string          `json:"cep_destination"`
	ID                      int64           `json:"id"`
}

func (q *Queries) UpdateAdvertisement(ctx context.Context, arg UpdateAdvertisementParams) (Advertisement, error) {
	row := q.db.QueryRowContext(ctx, updateAdvertisement,
		arg.UserID,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Distance,
		arg.PickupDate,
		arg.DeliveryDate,
		arg.ExpirationDate,
		arg.Title,
		arg.CargoType,
		arg.CargoSpecies,
		arg.CargoWeight,
		arg.VehiclesAccepted,
		arg.Trailer,
		arg.RequiresTarp,
		arg.Tracking,
		arg.Agency,
		arg.Description,
		arg.PaymentType,
		arg.Advance,
		arg.Toll,
		arg.Situation,
		arg.Price,
		arg.UpdatedWho,
		arg.StateOrigin,
		arg.CityOrigin,
		arg.ComplementOrigin,
		arg.NeighborhoodOrigin,
		arg.StreetOrigin,
		arg.StreetNumberOrigin,
		arg.CepOrigin,
		arg.StateDestination,
		arg.CityDestination,
		arg.ComplementDestination,
		arg.NeighborhoodDestination,
		arg.StreetDestination,
		arg.StreetNumberDestination,
		arg.CepDestination,
		arg.ID,
	)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.StateOrigin,
		&i.CityOrigin,
		&i.ComplementOrigin,
		&i.NeighborhoodOrigin,
		&i.StreetOrigin,
		&i.StreetNumberOrigin,
		&i.CepOrigin,
		&i.StateDestination,
		&i.CityDestination,
		&i.ComplementDestination,
		&i.NeighborhoodDestination,
		&i.StreetDestination,
		&i.StreetNumberDestination,
		&i.CepDestination,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const updateAdvertisementSituation = `-- name: UpdateAdvertisementSituation :exec
UPDATE public.advertisement
SET situation=$1, updated_at=now(), updated_who=$2
WHERE id=$3
`

type UpdateAdvertisementSituationParams struct {
	Situation  string         `json:"situation"`
	UpdatedWho sql.NullString `json:"updated_who"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateAdvertisementSituation(ctx context.Context, arg UpdateAdvertisementSituationParams) error {
	_, err := q.db.ExecContext(ctx, updateAdvertisementSituation, arg.Situation, arg.UpdatedWho, arg.ID)
	return err
}

const updatedAdvertisementFinishedCreate = `-- name: UpdatedAdvertisementFinishedCreate :one
UPDATE public.advertisement
SET destination_lat=$3, destination_lng=$4, origin_lat=$5, origin_lng=$6, situation='ativo'
WHERE user_id=$1 AND
      id=$2
      RETURNING id, user_id, destination_lat, destination_lng, origin_lat, origin_lng, situation
`

type UpdatedAdvertisementFinishedCreateParams struct {
	UserID         int64           `json:"user_id"`
	ID             int64           `json:"id"`
	DestinationLat sql.NullFloat64 `json:"destination_lat"`
	DestinationLng sql.NullFloat64 `json:"destination_lng"`
	OriginLat      sql.NullFloat64 `json:"origin_lat"`
	OriginLng      sql.NullFloat64 `json:"origin_lng"`
}

type UpdatedAdvertisementFinishedCreateRow struct {
	ID             int64           `json:"id"`
	UserID         int64           `json:"user_id"`
	DestinationLat sql.NullFloat64 `json:"destination_lat"`
	DestinationLng sql.NullFloat64 `json:"destination_lng"`
	OriginLat      sql.NullFloat64 `json:"origin_lat"`
	OriginLng      sql.NullFloat64 `json:"origin_lng"`
	Situation      string          `json:"situation"`
}

func (q *Queries) UpdatedAdvertisementFinishedCreate(ctx context.Context, arg UpdatedAdvertisementFinishedCreateParams) (UpdatedAdvertisementFinishedCreateRow, error) {
	row := q.db.QueryRowContext(ctx, updatedAdvertisementFinishedCreate,
		arg.UserID,
		arg.ID,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
	)
	var i UpdatedAdvertisementFinishedCreateRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Situation,
	)
	return i, err
}
