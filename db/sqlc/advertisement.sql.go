// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: advertisement.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countAdvertisementByUserID = `-- name: CountAdvertisementByUserID :one
SELECT COUNT(*)
FROM public.advertisement
WHERE user_id = $1
  AND status = true
  AND situation = 'ativo'
`

func (q *Queries) CountAdvertisementByUserID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAdvertisementByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdvertisement = `-- name: CreateAdvertisement :one
INSERT INTO public.advertisement
(id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who)
VALUES(nextval('advertisement_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9,
       $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, true, now(), $28)
    RETURNING id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
`

type CreateAdvertisementParams struct {
	UserID           int64     `json:"user_id"`
	Destination      string    `json:"destination"`
	Origin           string    `json:"origin"`
	DestinationLat   float64   `json:"destination_lat"`
	DestinationLng   float64   `json:"destination_lng"`
	OriginLat        float64   `json:"origin_lat"`
	OriginLng        float64   `json:"origin_lng"`
	Distance         int64     `json:"distance"`
	PickupDate       time.Time `json:"pickup_date"`
	DeliveryDate     time.Time `json:"delivery_date"`
	ExpirationDate   time.Time `json:"expiration_date"`
	Title            string    `json:"title"`
	CargoType        string    `json:"cargo_type"`
	CargoSpecies     string    `json:"cargo_species"`
	CargoVolume      string    `json:"cargo_volume"`
	CargoWeight      float64   `json:"cargo_weight"`
	VehiclesAccepted string    `json:"vehicles_accepted"`
	Trailer          string    `json:"trailer"`
	RequiresTarp     bool      `json:"requires_tarp"`
	Tracking         bool      `json:"tracking"`
	Agency           bool      `json:"agency"`
	Description      string    `json:"description"`
	PaymentType      string    `json:"payment_type"`
	Advance          string    `json:"advance"`
	Toll             bool      `json:"toll"`
	Situation        string    `json:"situation"`
	Price            float64   `json:"price"`
	CreatedWho       string    `json:"created_who"`
}

func (q *Queries) CreateAdvertisement(ctx context.Context, arg CreateAdvertisementParams) (Advertisement, error) {
	row := q.db.QueryRowContext(ctx, createAdvertisement,
		arg.UserID,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Distance,
		arg.PickupDate,
		arg.DeliveryDate,
		arg.ExpirationDate,
		arg.Title,
		arg.CargoType,
		arg.CargoSpecies,
		arg.CargoVolume,
		arg.CargoWeight,
		arg.VehiclesAccepted,
		arg.Trailer,
		arg.RequiresTarp,
		arg.Tracking,
		arg.Agency,
		arg.Description,
		arg.PaymentType,
		arg.Advance,
		arg.Toll,
		arg.Situation,
		arg.Price,
		arg.CreatedWho,
	)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const deleteAdvertisement = `-- name: DeleteAdvertisement :exec
UPDATE public.advertisement
SET status=false, updated_at=now(), updated_who=$2
WHERE id=$1
`

type DeleteAdvertisementParams struct {
	ID         int64          `json:"id"`
	UpdatedWho sql.NullString `json:"updated_who"`
}

func (q *Queries) DeleteAdvertisement(ctx context.Context, arg DeleteAdvertisementParams) error {
	_, err := q.db.ExecContext(ctx, deleteAdvertisement, arg.ID, arg.UpdatedWho)
	return err
}

const getAdvertisementById = `-- name: GetAdvertisementById :one
SELECT id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
FROM public.advertisement
WHERE id=$1
`

func (q *Queries) GetAdvertisementById(ctx context.Context, id int64) (Advertisement, error) {
	row := q.db.QueryRowContext(ctx, getAdvertisementById, id)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const getAllAdvertisementPublic = `-- name: GetAllAdvertisementPublic :many
SELECT id, destination, origin, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, created_at
FROM public.advertisement
WHERE status=true
ORDER BY expiration_date
`

type GetAllAdvertisementPublicRow struct {
	ID               int64     `json:"id"`
	Destination      string    `json:"destination"`
	Origin           string    `json:"origin"`
	PickupDate       time.Time `json:"pickup_date"`
	DeliveryDate     time.Time `json:"delivery_date"`
	ExpirationDate   time.Time `json:"expiration_date"`
	Title            string    `json:"title"`
	CargoType        string    `json:"cargo_type"`
	CargoSpecies     string    `json:"cargo_species"`
	CargoVolume      string    `json:"cargo_volume"`
	CargoWeight      float64   `json:"cargo_weight"`
	VehiclesAccepted string    `json:"vehicles_accepted"`
	Trailer          string    `json:"trailer"`
	RequiresTarp     bool      `json:"requires_tarp"`
	Tracking         bool      `json:"tracking"`
	Agency           bool      `json:"agency"`
	Description      string    `json:"description"`
	PaymentType      string    `json:"payment_type"`
	Advance          string    `json:"advance"`
	Toll             bool      `json:"toll"`
	Situation        string    `json:"situation"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetAllAdvertisementPublic(ctx context.Context) ([]GetAllAdvertisementPublicRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdvertisementPublic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdvertisementPublicRow
	for rows.Next() {
		var i GetAllAdvertisementPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.Origin,
			&i.PickupDate,
			&i.DeliveryDate,
			&i.ExpirationDate,
			&i.Title,
			&i.CargoType,
			&i.CargoSpecies,
			&i.CargoVolume,
			&i.CargoWeight,
			&i.VehiclesAccepted,
			&i.Trailer,
			&i.RequiresTarp,
			&i.Tracking,
			&i.Agency,
			&i.Description,
			&i.PaymentType,
			&i.Advance,
			&i.Toll,
			&i.Situation,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAdvertisementUsers = `-- name: GetAllAdvertisementUsers :many
SELECT a.id, user_id, u.name as user_name, u.created_at as active_there, u.city as user_city, u.state as user_state, u.phone as user_phone, u.email as user_email, u.profile_picture as user_profile_picture, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, a.created_at, created_who, a.updated_at, updated_who
FROM public.advertisement a
         inner join users u on u.id = a.user_id
WHERE a.status=true
ORDER BY expiration_date
`

type GetAllAdvertisementUsersRow struct {
	ID                 int64          `json:"id"`
	UserID             int64          `json:"user_id"`
	UserName           string         `json:"user_name"`
	ActiveThere        sql.NullTime   `json:"active_there"`
	UserCity           sql.NullString `json:"user_city"`
	UserState          sql.NullString `json:"user_state"`
	UserPhone          sql.NullString `json:"user_phone"`
	UserEmail          string         `json:"user_email"`
	UserProfilePicture sql.NullString `json:"user_profile_picture"`
	Destination        string         `json:"destination"`
	Origin             string         `json:"origin"`
	DestinationLat     float64        `json:"destination_lat"`
	DestinationLng     float64        `json:"destination_lng"`
	OriginLat          float64        `json:"origin_lat"`
	OriginLng          float64        `json:"origin_lng"`
	Distance           int64          `json:"distance"`
	PickupDate         time.Time      `json:"pickup_date"`
	DeliveryDate       time.Time      `json:"delivery_date"`
	ExpirationDate     time.Time      `json:"expiration_date"`
	Title              string         `json:"title"`
	CargoType          string         `json:"cargo_type"`
	CargoSpecies       string         `json:"cargo_species"`
	CargoVolume        string         `json:"cargo_volume"`
	CargoWeight        float64        `json:"cargo_weight"`
	VehiclesAccepted   string         `json:"vehicles_accepted"`
	Trailer            string         `json:"trailer"`
	RequiresTarp       bool           `json:"requires_tarp"`
	Tracking           bool           `json:"tracking"`
	Agency             bool           `json:"agency"`
	Description        string         `json:"description"`
	PaymentType        string         `json:"payment_type"`
	Advance            string         `json:"advance"`
	Toll               bool           `json:"toll"`
	Situation          string         `json:"situation"`
	CreatedAt          time.Time      `json:"created_at"`
	CreatedWho         string         `json:"created_who"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
	UpdatedWho         sql.NullString `json:"updated_who"`
}

func (q *Queries) GetAllAdvertisementUsers(ctx context.Context) ([]GetAllAdvertisementUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdvertisementUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdvertisementUsersRow
	for rows.Next() {
		var i GetAllAdvertisementUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserName,
			&i.ActiveThere,
			&i.UserCity,
			&i.UserState,
			&i.UserPhone,
			&i.UserEmail,
			&i.UserProfilePicture,
			&i.Destination,
			&i.Origin,
			&i.DestinationLat,
			&i.DestinationLng,
			&i.OriginLat,
			&i.OriginLng,
			&i.Distance,
			&i.PickupDate,
			&i.DeliveryDate,
			&i.ExpirationDate,
			&i.Title,
			&i.CargoType,
			&i.CargoSpecies,
			&i.CargoVolume,
			&i.CargoWeight,
			&i.VehiclesAccepted,
			&i.Trailer,
			&i.RequiresTarp,
			&i.Tracking,
			&i.Agency,
			&i.Description,
			&i.PaymentType,
			&i.Advance,
			&i.Toll,
			&i.Situation,
			&i.CreatedAt,
			&i.CreatedWho,
			&i.UpdatedAt,
			&i.UpdatedWho,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdvertisement = `-- name: UpdateAdvertisement :one
UPDATE public.advertisement
SET user_id=$1, destination=$2, origin=$3, destination_lat=$4, destination_lng=$5, origin_lat=$6, origin_lng=$7, distance=$8, pickup_date=$9, delivery_date=$10, expiration_date=$11, title=$12,
    cargo_type=$13, cargo_species=$14, cargo_volume=$15, cargo_weight=$16, vehicles_accepted=$17, trailer=$18, requires_tarp=$19, tracking=$20, agency=$21, description=$22, payment_type=$23, advance=$24, toll=$25, situation=$26, price=$27, updated_at=now(), updated_who=$28
WHERE id=$29
    RETURNING id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
`

type UpdateAdvertisementParams struct {
	UserID           int64          `json:"user_id"`
	Destination      string         `json:"destination"`
	Origin           string         `json:"origin"`
	DestinationLat   float64        `json:"destination_lat"`
	DestinationLng   float64        `json:"destination_lng"`
	OriginLat        float64        `json:"origin_lat"`
	OriginLng        float64        `json:"origin_lng"`
	Distance         int64          `json:"distance"`
	PickupDate       time.Time      `json:"pickup_date"`
	DeliveryDate     time.Time      `json:"delivery_date"`
	ExpirationDate   time.Time      `json:"expiration_date"`
	Title            string         `json:"title"`
	CargoType        string         `json:"cargo_type"`
	CargoSpecies     string         `json:"cargo_species"`
	CargoVolume      string         `json:"cargo_volume"`
	CargoWeight      float64        `json:"cargo_weight"`
	VehiclesAccepted string         `json:"vehicles_accepted"`
	Trailer          string         `json:"trailer"`
	RequiresTarp     bool           `json:"requires_tarp"`
	Tracking         bool           `json:"tracking"`
	Agency           bool           `json:"agency"`
	Description      string         `json:"description"`
	PaymentType      string         `json:"payment_type"`
	Advance          string         `json:"advance"`
	Toll             bool           `json:"toll"`
	Situation        string         `json:"situation"`
	Price            float64        `json:"price"`
	UpdatedWho       sql.NullString `json:"updated_who"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdateAdvertisement(ctx context.Context, arg UpdateAdvertisementParams) (Advertisement, error) {
	row := q.db.QueryRowContext(ctx, updateAdvertisement,
		arg.UserID,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Distance,
		arg.PickupDate,
		arg.DeliveryDate,
		arg.ExpirationDate,
		arg.Title,
		arg.CargoType,
		arg.CargoSpecies,
		arg.CargoVolume,
		arg.CargoWeight,
		arg.VehiclesAccepted,
		arg.Trailer,
		arg.RequiresTarp,
		arg.Tracking,
		arg.Agency,
		arg.Description,
		arg.PaymentType,
		arg.Advance,
		arg.Toll,
		arg.Situation,
		arg.Price,
		arg.UpdatedWho,
		arg.ID,
	)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}
