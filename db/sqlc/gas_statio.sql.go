// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gas_statio.sql

package db

import (
	"context"
)

const createGasStations = `-- name: CreateGasStations :one
INSERT INTO public.gas_station
(id, name, latitude, longitude, address_name, municipio, specific_point)
VALUES(nextval('gas_station_id_seq'::regclass), $1, $2, $3, $4, $5, $6)
    RETURNING id, name, latitude, longitude, address_name, municipio, specific_point
`

type CreateGasStationsParams struct {
	Name          string `json:"name"`
	Latitude      string `json:"latitude"`
	Longitude     string `json:"longitude"`
	AddressName   string `json:"address_name"`
	Municipio     string `json:"municipio"`
	SpecificPoint string `json:"specific_point"`
}

func (q *Queries) CreateGasStations(ctx context.Context, arg CreateGasStationsParams) (GasStation, error) {
	row := q.db.QueryRowContext(ctx, createGasStations,
		arg.Name,
		arg.Latitude,
		arg.Longitude,
		arg.AddressName,
		arg.Municipio,
		arg.SpecificPoint,
	)
	var i GasStation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Latitude,
		&i.Longitude,
		&i.AddressName,
		&i.Municipio,
		&i.SpecificPoint,
	)
	return i, err
}

const getGasStation = `-- name: GetGasStation :many
SELECT id, latitude, longitude, address_name, municipio, specific_point, name
FROM gas_station
WHERE
    CAST(latitude AS FLOAT) BETWEEN CAST($1 AS FLOAT) - $3 AND CAST($1 AS FLOAT) + $3
  AND CAST(longitude AS FLOAT) BETWEEN CAST($2 AS FLOAT) - $3 AND CAST($2 AS FLOAT) + $3
`

type GetGasStationParams struct {
	Column1 float64     `json:"column_1"`
	Column2 float64     `json:"column_2"`
	Column3 interface{} `json:"column_3"`
}

type GetGasStationRow struct {
	ID            int64  `json:"id"`
	Latitude      string `json:"latitude"`
	Longitude     string `json:"longitude"`
	AddressName   string `json:"address_name"`
	Municipio     string `json:"municipio"`
	SpecificPoint string `json:"specific_point"`
	Name          string `json:"name"`
}

func (q *Queries) GetGasStation(ctx context.Context, arg GetGasStationParams) ([]GetGasStationRow, error) {
	rows, err := q.db.QueryContext(ctx, getGasStation, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGasStationRow
	for rows.Next() {
		var i GetGasStationRow
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longitude,
			&i.AddressName,
			&i.Municipio,
			&i.SpecificPoint,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGasStationsByBoundingBox = `-- name: GetGasStationsByBoundingBox :many
SELECT id, latitude, longitude, address_name, municipio, specific_point, name
FROM gas_station
WHERE CAST(latitude AS FLOAT) BETWEEN CAST($1 AS FLOAT) AND CAST($2 AS FLOAT)
  AND CAST(longitude AS FLOAT) BETWEEN CAST($3 AS FLOAT) AND CAST($4 AS FLOAT)
`

type GetGasStationsByBoundingBoxParams struct {
	Column1 float64 `json:"column_1"`
	Column2 float64 `json:"column_2"`
	Column3 float64 `json:"column_3"`
	Column4 float64 `json:"column_4"`
}

type GetGasStationsByBoundingBoxRow struct {
	ID            int64  `json:"id"`
	Latitude      string `json:"latitude"`
	Longitude     string `json:"longitude"`
	AddressName   string `json:"address_name"`
	Municipio     string `json:"municipio"`
	SpecificPoint string `json:"specific_point"`
	Name          string `json:"name"`
}

func (q *Queries) GetGasStationsByBoundingBox(ctx context.Context, arg GetGasStationsByBoundingBoxParams) ([]GetGasStationsByBoundingBoxRow, error) {
	rows, err := q.db.QueryContext(ctx, getGasStationsByBoundingBox,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGasStationsByBoundingBoxRow
	for rows.Next() {
		var i GetGasStationsByBoundingBoxRow
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longitude,
			&i.AddressName,
			&i.Municipio,
			&i.SpecificPoint,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
