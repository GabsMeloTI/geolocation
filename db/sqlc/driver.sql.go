// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: driver.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO public.driver
(id, user_id, birth_date, cpf, license_number, license_category, license_expiration_date, state, city, neighborhood, street, street_number, phone, status, created_at)
VALUES(nextval('driver_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,
       $12, true, now())
    RETURNING id, user_id, birth_date, cpf, license_number, license_category, license_expiration_date, state, city, neighborhood, street, street_number, phone, status, created_at, updated_at
`

type CreateDriverParams struct {
	UserID                int64          `json:"user_id"`
	BirthDate             time.Time      `json:"birth_date"`
	Cpf                   string         `json:"cpf"`
	LicenseNumber         string         `json:"license_number"`
	LicenseCategory       string         `json:"license_category"`
	LicenseExpirationDate time.Time      `json:"license_expiration_date"`
	State                 sql.NullString `json:"state"`
	City                  sql.NullString `json:"city"`
	Neighborhood          sql.NullString `json:"neighborhood"`
	Street                sql.NullString `json:"street"`
	StreetNumber          sql.NullString `json:"street_number"`
	Phone                 string         `json:"phone"`
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver,
		arg.UserID,
		arg.BirthDate,
		arg.Cpf,
		arg.LicenseNumber,
		arg.LicenseCategory,
		arg.LicenseExpirationDate,
		arg.State,
		arg.City,
		arg.Neighborhood,
		arg.Street,
		arg.StreetNumber,
		arg.Phone,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BirthDate,
		&i.Cpf,
		&i.LicenseNumber,
		&i.LicenseCategory,
		&i.LicenseExpirationDate,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec
UPDATE public.driver
SET status=false, updated_at=now()
WHERE id=$1
`

func (q *Queries) DeleteDriver(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDriver, id)
	return err
}

const getDriverById = `-- name: GetDriverById :one
SELECT id, user_id, birth_date, cpf, license_number, license_category, license_expiration_date, state, city, neighborhood, street, street_number, phone, status, created_at, updated_at
FROM public.driver
WHERE id=$1
`

func (q *Queries) GetDriverById(ctx context.Context, id int64) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverById, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BirthDate,
		&i.Cpf,
		&i.LicenseNumber,
		&i.LicenseCategory,
		&i.LicenseExpirationDate,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDriver = `-- name: UpdateDriver :one
UPDATE public.driver
SET user_id=$2, birth_date=$3, license_category=$4, license_expiration_date=$5, state=$6, city=$7, neighborhood=$8, street=$9, street_number=$10, phone=$11, updated_at=now()
WHERE id=$1
    RETURNING id, user_id, birth_date, cpf, license_number, license_category, license_expiration_date, state, city, neighborhood, street, street_number, phone, status, created_at, updated_at
`

type UpdateDriverParams struct {
	ID                    int64          `json:"id"`
	UserID                int64          `json:"user_id"`
	BirthDate             time.Time      `json:"birth_date"`
	LicenseCategory       string         `json:"license_category"`
	LicenseExpirationDate time.Time      `json:"license_expiration_date"`
	State                 sql.NullString `json:"state"`
	City                  sql.NullString `json:"city"`
	Neighborhood          sql.NullString `json:"neighborhood"`
	Street                sql.NullString `json:"street"`
	StreetNumber          sql.NullString `json:"street_number"`
	Phone                 string         `json:"phone"`
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, updateDriver,
		arg.ID,
		arg.UserID,
		arg.BirthDate,
		arg.LicenseCategory,
		arg.LicenseExpirationDate,
		arg.State,
		arg.City,
		arg.Neighborhood,
		arg.Street,
		arg.StreetNumber,
		arg.Phone,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BirthDate,
		&i.Cpf,
		&i.LicenseNumber,
		&i.LicenseCategory,
		&i.LicenseExpirationDate,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
