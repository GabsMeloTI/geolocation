// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: login.sql

package db

import (
	"context"
	"database/sql"
)

const login = `-- name: Login :one
SELECT
    id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture, status, driver_id, date_of_birth, secondary_contact, cep, complement
FROM
    users
WHERE
    email = $1 and
    google_id = $2 and
    status = true
`

type LoginParams struct {
	Email    string         `json:"email"`
	GoogleID sql.NullString `json:"google_id"`
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.Email, arg.GoogleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
		&i.Status,
		&i.DriverID,
		&i.DateOfBirth,
		&i.SecondaryContact,
		&i.Cep,
		&i.Complement,
	)
	return i, err
}

const newCreateUser = `-- name: NewCreateUser :one
INSERT INTO public.users
("name", email, "password", created_at, profile_id, "document", phone, google_id, profile_picture, status)
VALUES( $1, $2, $3, CURRENT_TIMESTAMP, $4, $5, $6, $7, $8, true)
    returning id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture, status, driver_id, date_of_birth, secondary_contact, cep, complement
`

type NewCreateUserParams struct {
	Name           string         `json:"name"`
	Email          string         `json:"email"`
	Password       sql.NullString `json:"password"`
	ProfileID      sql.NullInt64  `json:"profile_id"`
	Document       sql.NullString `json:"document"`
	Phone          sql.NullString `json:"phone"`
	GoogleID       sql.NullString `json:"google_id"`
	ProfilePicture sql.NullString `json:"profile_picture"`
}

func (q *Queries) NewCreateUser(ctx context.Context, arg NewCreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, newCreateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.ProfileID,
		arg.Document,
		arg.Phone,
		arg.GoogleID,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
		&i.Status,
		&i.DriverID,
		&i.DateOfBirth,
		&i.SecondaryContact,
		&i.Cep,
		&i.Complement,
	)
	return i, err
}
