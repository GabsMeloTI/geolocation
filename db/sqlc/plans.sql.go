// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plans.sql

package db

import (
	"context"
)

const createPlans = `-- name: CreatePlans :one
INSERT INTO public."plans"
(id, "name", price, duration, annual)
VALUES(nextval('plans_id_seq'::regclass), $1, $2, $3, $4)
    RETURNING id, name, price, duration, annual
`

type CreatePlansParams struct {
	Name     string `json:"name"`
	Price    string `json:"price"`
	Duration string `json:"duration"`
	Annual   bool   `json:"annual"`
}

func (q *Queries) CreatePlans(ctx context.Context, arg CreatePlansParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, createPlans,
		arg.Name,
		arg.Price,
		arg.Duration,
		arg.Annual,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Duration,
		&i.Annual,
	)
	return i, err
}

const updatePlans = `-- name: UpdatePlans :one
UPDATE public."plans"
SET "name"=$2, price=$3, duration=$4, annual=$5
WHERE id=$1
    RETURNING id, name, price, duration, annual
`

type UpdatePlansParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Price    string `json:"price"`
	Duration string `json:"duration"`
	Annual   bool   `json:"annual"`
}

func (q *Queries) UpdatePlans(ctx context.Context, arg UpdatePlansParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, updatePlans,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Duration,
		arg.Annual,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Duration,
		&i.Annual,
	)
	return i, err
}
