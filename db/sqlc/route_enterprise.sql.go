// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: route_enterprise.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createRouteEnterprise = `-- name: CreateRouteEnterprise :one
INSERT INTO public.route_enterprise
(id, origin, destination, waypoints, response, status, created_at, created_who, tenant_id, access_id)
VALUES(nextval('route_enterprise_id_seq'::regclass), $1, $2, $3, $4, true, now(), $5, $6, $7)
    RETURNING id, origin, destination, waypoints, response, status, created_at, created_who, tenant_id, access_id
`

type CreateRouteEnterpriseParams struct {
	Origin      string          `json:"origin"`
	Destination string          `json:"destination"`
	Waypoints   sql.NullString  `json:"waypoints"`
	Response    json.RawMessage `json:"response"`
	CreatedWho  string          `json:"created_who"`
	TenantID    uuid.UUID       `json:"tenant_id"`
	AccessID    int64           `json:"access_id"`
}

func (q *Queries) CreateRouteEnterprise(ctx context.Context, arg CreateRouteEnterpriseParams) (RouteEnterprise, error) {
	row := q.db.QueryRowContext(ctx, createRouteEnterprise,
		arg.Origin,
		arg.Destination,
		arg.Waypoints,
		arg.Response,
		arg.CreatedWho,
		arg.TenantID,
		arg.AccessID,
	)
	var i RouteEnterprise
	err := row.Scan(
		&i.ID,
		&i.Origin,
		&i.Destination,
		&i.Waypoints,
		&i.Response,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.TenantID,
		&i.AccessID,
	)
	return i, err
}

const deleteRouteEnterprise = `-- name: DeleteRouteEnterprise :exec
UPDATE public.route_enterprise
SET status=false
WHERE id=$1 AND
      tenant_id=$2 AND
      access_id=$3
`

type DeleteRouteEnterpriseParams struct {
	ID       int64     `json:"id"`
	TenantID uuid.UUID `json:"tenant_id"`
	AccessID int64     `json:"access_id"`
}

func (q *Queries) DeleteRouteEnterprise(ctx context.Context, arg DeleteRouteEnterpriseParams) error {
	_, err := q.db.ExecContext(ctx, deleteRouteEnterprise, arg.ID, arg.TenantID, arg.AccessID)
	return err
}
