// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_hist.sql

package db

import (
	"context"
	"time"
)

const createPaymentHist = `-- name: CreatePaymentHist :one
INSERT INTO public.payment_hist
(id, user_id, email, "name", value, "method", automatic, payment_date, payment_expireted, payment_status, currency, invoice, customer, "interval")
VALUES(nextval('payment_hist_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
    RETURNING id, user_id, email, name, value, method, automatic, payment_date, payment_expireted, payment_status, currency, invoice, customer, interval
`

type CreatePaymentHistParams struct {
	UserID           int64     `json:"user_id"`
	Email            string    `json:"email"`
	Name             string    `json:"name"`
	Value            float64   `json:"value"`
	Method           string    `json:"method"`
	Automatic        bool      `json:"automatic"`
	PaymentDate      time.Time `json:"payment_date"`
	PaymentExpireted time.Time `json:"payment_expireted"`
	PaymentStatus    string    `json:"payment_status"`
	Currency         string    `json:"currency"`
	Invoice          string    `json:"invoice"`
	Customer         string    `json:"customer"`
	Interval         string    `json:"interval"`
}

func (q *Queries) CreatePaymentHist(ctx context.Context, arg CreatePaymentHistParams) (PaymentHist, error) {
	row := q.db.QueryRowContext(ctx, createPaymentHist,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.Value,
		arg.Method,
		arg.Automatic,
		arg.PaymentDate,
		arg.PaymentExpireted,
		arg.PaymentStatus,
		arg.Currency,
		arg.Invoice,
		arg.Customer,
		arg.Interval,
	)
	var i PaymentHist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.Value,
		&i.Method,
		&i.Automatic,
		&i.PaymentDate,
		&i.PaymentExpireted,
		&i.PaymentStatus,
		&i.Currency,
		&i.Invoice,
		&i.Customer,
		&i.Interval,
	)
	return i, err
}

const getPaymentHist = `-- name: GetPaymentHist :many
SELECT id, user_id, email, name, value, method, automatic, payment_date, payment_expireted, payment_status, currency, invoice, customer, interval
FROM public.payment_hist
WHERE user_id=$1
`

func (q *Queries) GetPaymentHist(ctx context.Context, userID int64) ([]PaymentHist, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentHist, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentHist
	for rows.Next() {
		var i PaymentHist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.Name,
			&i.Value,
			&i.Method,
			&i.Automatic,
			&i.PaymentDate,
			&i.PaymentExpireted,
			&i.PaymentStatus,
			&i.Currency,
			&i.Invoice,
			&i.Customer,
			&i.Interval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
