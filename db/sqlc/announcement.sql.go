// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: announcement.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAnnouncement = `-- name: CreateAnnouncement :one
INSERT INTO public.announcement
(id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who)
VALUES(nextval('announcement_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9,
       $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, true, now(), $28)
    RETURNING id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
`

type CreateAnnouncementParams struct {
	UserID           int64     `json:"user_id"`
	Destination      string    `json:"destination"`
	Origin           string    `json:"origin"`
	DestinationLat   string    `json:"destination_lat"`
	DestinationLng   string    `json:"destination_lng"`
	OriginLat        string    `json:"origin_lat"`
	OriginLng        string    `json:"origin_lng"`
	Distance         int64     `json:"distance"`
	PickupDate       time.Time `json:"pickup_date"`
	DeliveryDate     time.Time `json:"delivery_date"`
	ExpirationDate   time.Time `json:"expiration_date"`
	Title            string    `json:"title"`
	CargoType        string    `json:"cargo_type"`
	CargoSpecies     string    `json:"cargo_species"`
	CargoVolume      string    `json:"cargo_volume"`
	CargoWeight      string    `json:"cargo_weight"`
	VehiclesAccepted string    `json:"vehicles_accepted"`
	Trailer          string    `json:"trailer"`
	RequiresTarp     bool      `json:"requires_tarp"`
	Tracking         bool      `json:"tracking"`
	Agency           bool      `json:"agency"`
	Description      string    `json:"description"`
	PaymentType      string    `json:"payment_type"`
	Advance          string    `json:"advance"`
	Toll             bool      `json:"toll"`
	Situation        string    `json:"situation"`
	Price            string    `json:"price"`
	CreatedWho       string    `json:"created_who"`
}

func (q *Queries) CreateAnnouncement(ctx context.Context, arg CreateAnnouncementParams) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, createAnnouncement,
		arg.UserID,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Distance,
		arg.PickupDate,
		arg.DeliveryDate,
		arg.ExpirationDate,
		arg.Title,
		arg.CargoType,
		arg.CargoSpecies,
		arg.CargoVolume,
		arg.CargoWeight,
		arg.VehiclesAccepted,
		arg.Trailer,
		arg.RequiresTarp,
		arg.Tracking,
		arg.Agency,
		arg.Description,
		arg.PaymentType,
		arg.Advance,
		arg.Toll,
		arg.Situation,
		arg.Price,
		arg.CreatedWho,
	)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const deleteAnnouncement = `-- name: DeleteAnnouncement :exec
UPDATE public.announcement
SET status=false, updated_at=now(), updated_who=$2
WHERE id=$1
`

type DeleteAnnouncementParams struct {
	ID         int64          `json:"id"`
	UpdatedWho sql.NullString `json:"updated_who"`
}

func (q *Queries) DeleteAnnouncement(ctx context.Context, arg DeleteAnnouncementParams) error {
	_, err := q.db.ExecContext(ctx, deleteAnnouncement, arg.ID, arg.UpdatedWho)
	return err
}

const getAllAnnouncementPublic = `-- name: GetAllAnnouncementPublic :one
SELECT id, destination, origin, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, created_at
FROM public.announcement
WHERE status=true
ORDER BY expiration_date
`

type GetAllAnnouncementPublicRow struct {
	ID               int64     `json:"id"`
	Destination      string    `json:"destination"`
	Origin           string    `json:"origin"`
	PickupDate       time.Time `json:"pickup_date"`
	DeliveryDate     time.Time `json:"delivery_date"`
	ExpirationDate   time.Time `json:"expiration_date"`
	Title            string    `json:"title"`
	CargoType        string    `json:"cargo_type"`
	CargoSpecies     string    `json:"cargo_species"`
	CargoVolume      string    `json:"cargo_volume"`
	CargoWeight      string    `json:"cargo_weight"`
	VehiclesAccepted string    `json:"vehicles_accepted"`
	Trailer          string    `json:"trailer"`
	RequiresTarp     bool      `json:"requires_tarp"`
	Tracking         bool      `json:"tracking"`
	Agency           bool      `json:"agency"`
	Description      string    `json:"description"`
	PaymentType      string    `json:"payment_type"`
	Advance          string    `json:"advance"`
	Toll             bool      `json:"toll"`
	Situation        string    `json:"situation"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetAllAnnouncementPublic(ctx context.Context) (GetAllAnnouncementPublicRow, error) {
	row := q.db.QueryRowContext(ctx, getAllAnnouncementPublic)
	var i GetAllAnnouncementPublicRow
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Origin,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAnnouncementUsers = `-- name: GetAllAnnouncementUsers :one
SELECT id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
FROM public.announcement
WHERE status=true
ORDER BY expiration_date
`

func (q *Queries) GetAllAnnouncementUsers(ctx context.Context) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, getAllAnnouncementUsers)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const getAnnouncementById = `-- name: GetAnnouncementById :one
SELECT id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
FROM public.announcement
WHERE id=$1
`

func (q *Queries) GetAnnouncementById(ctx context.Context, id int64) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncementById, id)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}

const updateAnnouncement = `-- name: UpdateAnnouncement :one
UPDATE public.announcement
SET user_id=$1, destination=$2, origin=$3, destination_lat=$4, destination_lng=$5, origin_lat=$6, origin_lng=$7, distance=$8, pickup_date=$9, delivery_date=$10, expiration_date=$11, title=$12,
    cargo_type=$13, cargo_species=$14, cargo_volume=$15, cargo_weight=$16, vehicles_accepted=$17, trailer=$18, requires_tarp=$19, tracking=$20, agency=$21, description=$22, payment_type=$23, advance=$24, toll=$25, situation=$26, price=$27, updated_at=now(), updated_who=$28
WHERE id=$29
    RETURNING id, user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_volume, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, situation, price, status, created_at, created_who, updated_at, updated_who
`

type UpdateAnnouncementParams struct {
	UserID           int64          `json:"user_id"`
	Destination      string         `json:"destination"`
	Origin           string         `json:"origin"`
	DestinationLat   string         `json:"destination_lat"`
	DestinationLng   string         `json:"destination_lng"`
	OriginLat        string         `json:"origin_lat"`
	OriginLng        string         `json:"origin_lng"`
	Distance         int64          `json:"distance"`
	PickupDate       time.Time      `json:"pickup_date"`
	DeliveryDate     time.Time      `json:"delivery_date"`
	ExpirationDate   time.Time      `json:"expiration_date"`
	Title            string         `json:"title"`
	CargoType        string         `json:"cargo_type"`
	CargoSpecies     string         `json:"cargo_species"`
	CargoVolume      string         `json:"cargo_volume"`
	CargoWeight      string         `json:"cargo_weight"`
	VehiclesAccepted string         `json:"vehicles_accepted"`
	Trailer          string         `json:"trailer"`
	RequiresTarp     bool           `json:"requires_tarp"`
	Tracking         bool           `json:"tracking"`
	Agency           bool           `json:"agency"`
	Description      string         `json:"description"`
	PaymentType      string         `json:"payment_type"`
	Advance          string         `json:"advance"`
	Toll             bool           `json:"toll"`
	Situation        string         `json:"situation"`
	Price            string         `json:"price"`
	UpdatedWho       sql.NullString `json:"updated_who"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdateAnnouncement(ctx context.Context, arg UpdateAnnouncementParams) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, updateAnnouncement,
		arg.UserID,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Distance,
		arg.PickupDate,
		arg.DeliveryDate,
		arg.ExpirationDate,
		arg.Title,
		arg.CargoType,
		arg.CargoSpecies,
		arg.CargoVolume,
		arg.CargoWeight,
		arg.VehiclesAccepted,
		arg.Trailer,
		arg.RequiresTarp,
		arg.Tracking,
		arg.Agency,
		arg.Description,
		arg.PaymentType,
		arg.Advance,
		arg.Toll,
		arg.Situation,
		arg.Price,
		arg.UpdatedWho,
		arg.ID,
	)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Distance,
		&i.PickupDate,
		&i.DeliveryDate,
		&i.ExpirationDate,
		&i.Title,
		&i.CargoType,
		&i.CargoSpecies,
		&i.CargoVolume,
		&i.CargoWeight,
		&i.VehiclesAccepted,
		&i.Trailer,
		&i.RequiresTarp,
		&i.Tracking,
		&i.Agency,
		&i.Description,
		&i.PaymentType,
		&i.Advance,
		&i.Toll,
		&i.Situation,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedWho,
		&i.UpdatedAt,
		&i.UpdatedWho,
	)
	return i, err
}
