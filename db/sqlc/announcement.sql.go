// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: announcement.sql

package db

import (
	"context"
	"time"
)

const createAnnouncement = `-- name: CreateAnnouncement :one
INSERT INTO public.announcement
(id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, description, cargo_description, payment_description, delivery_date, pickup_date, deadline_date, price, vehicle, body_type, kilometers, cargo_nature, cargo_type, cargo_weight, tracking, requires_tarp, status, created_at)
VALUES(nextval('announcement_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9,
       $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, true, now())
    RETURNING id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, description, cargo_description, payment_description, delivery_date, pickup_date, deadline_date, price, vehicle, body_type, kilometers, cargo_nature, cargo_type, cargo_weight, tracking, requires_tarp, status, created_at, updated_at
`

type CreateAnnouncementParams struct {
	Destination        string    `json:"destination"`
	Origin             string    `json:"origin"`
	DestinationLat     string    `json:"destination_lat"`
	DestinationLng     string    `json:"destination_lng"`
	OriginLat          string    `json:"origin_lat"`
	OriginLng          string    `json:"origin_lng"`
	Description        string    `json:"description"`
	CargoDescription   string    `json:"cargo_description"`
	PaymentDescription string    `json:"payment_description"`
	DeliveryDate       time.Time `json:"delivery_date"`
	PickupDate         time.Time `json:"pickup_date"`
	DeadlineDate       time.Time `json:"deadline_date"`
	Price              string    `json:"price"`
	Vehicle            string    `json:"vehicle"`
	BodyType           string    `json:"body_type"`
	Kilometers         string    `json:"kilometers"`
	CargoNature        string    `json:"cargo_nature"`
	CargoType          string    `json:"cargo_type"`
	CargoWeight        string    `json:"cargo_weight"`
	Tracking           bool      `json:"tracking"`
	RequiresTarp       bool      `json:"requires_tarp"`
}

func (q *Queries) CreateAnnouncement(ctx context.Context, arg CreateAnnouncementParams) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, createAnnouncement,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Description,
		arg.CargoDescription,
		arg.PaymentDescription,
		arg.DeliveryDate,
		arg.PickupDate,
		arg.DeadlineDate,
		arg.Price,
		arg.Vehicle,
		arg.BodyType,
		arg.Kilometers,
		arg.CargoNature,
		arg.CargoType,
		arg.CargoWeight,
		arg.Tracking,
		arg.RequiresTarp,
	)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Description,
		&i.CargoDescription,
		&i.PaymentDescription,
		&i.DeliveryDate,
		&i.PickupDate,
		&i.DeadlineDate,
		&i.Price,
		&i.Vehicle,
		&i.BodyType,
		&i.Kilometers,
		&i.CargoNature,
		&i.CargoType,
		&i.CargoWeight,
		&i.Tracking,
		&i.RequiresTarp,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAnnouncement = `-- name: DeleteAnnouncement :exec
UPDATE public.announcement
SET status=false, updated_at=now()
WHERE id=$1
`

func (q *Queries) DeleteAnnouncement(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAnnouncement, id)
	return err
}

const getAnnouncementById = `-- name: GetAnnouncementById :one
SELECT id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, description, cargo_description, payment_description, delivery_date, pickup_date, deadline_date, price, vehicle, body_type, kilometers, cargo_nature, cargo_type, cargo_weight, tracking, requires_tarp, status, created_at, updated_at
FROM public.announcement
WHERE id=$1
`

func (q *Queries) GetAnnouncementById(ctx context.Context, id int64) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncementById, id)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Description,
		&i.CargoDescription,
		&i.PaymentDescription,
		&i.DeliveryDate,
		&i.PickupDate,
		&i.DeadlineDate,
		&i.Price,
		&i.Vehicle,
		&i.BodyType,
		&i.Kilometers,
		&i.CargoNature,
		&i.CargoType,
		&i.CargoWeight,
		&i.Tracking,
		&i.RequiresTarp,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAnnouncement = `-- name: UpdateAnnouncement :one
UPDATE public.announcement
SET destination=$2, origin=$3, destination_lat=$4, destination_lng=$5, origin_lat=$6, origin_lng=$7, description=$8, cargo_description=$9, payment_description=$10, delivery_date=$11, pickup_date=$12,
    deadline_date=$13, price=$14, vehicle=$15, body_type=$16, kilometers=$17, cargo_nature=$18, cargo_type=$19, cargo_weight=$20, tracking=$21, requires_tarp=$22, updated_at=now()
WHERE id=$1
    RETURNING id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, description, cargo_description, payment_description, delivery_date, pickup_date, deadline_date, price, vehicle, body_type, kilometers, cargo_nature, cargo_type, cargo_weight, tracking, requires_tarp, status, created_at, updated_at
`

type UpdateAnnouncementParams struct {
	ID                 int64     `json:"id"`
	Destination        string    `json:"destination"`
	Origin             string    `json:"origin"`
	DestinationLat     string    `json:"destination_lat"`
	DestinationLng     string    `json:"destination_lng"`
	OriginLat          string    `json:"origin_lat"`
	OriginLng          string    `json:"origin_lng"`
	Description        string    `json:"description"`
	CargoDescription   string    `json:"cargo_description"`
	PaymentDescription string    `json:"payment_description"`
	DeliveryDate       time.Time `json:"delivery_date"`
	PickupDate         time.Time `json:"pickup_date"`
	DeadlineDate       time.Time `json:"deadline_date"`
	Price              string    `json:"price"`
	Vehicle            string    `json:"vehicle"`
	BodyType           string    `json:"body_type"`
	Kilometers         string    `json:"kilometers"`
	CargoNature        string    `json:"cargo_nature"`
	CargoType          string    `json:"cargo_type"`
	CargoWeight        string    `json:"cargo_weight"`
	Tracking           bool      `json:"tracking"`
	RequiresTarp       bool      `json:"requires_tarp"`
}

func (q *Queries) UpdateAnnouncement(ctx context.Context, arg UpdateAnnouncementParams) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, updateAnnouncement,
		arg.ID,
		arg.Destination,
		arg.Origin,
		arg.DestinationLat,
		arg.DestinationLng,
		arg.OriginLat,
		arg.OriginLng,
		arg.Description,
		arg.CargoDescription,
		arg.PaymentDescription,
		arg.DeliveryDate,
		arg.PickupDate,
		arg.DeadlineDate,
		arg.Price,
		arg.Vehicle,
		arg.BodyType,
		arg.Kilometers,
		arg.CargoNature,
		arg.CargoType,
		arg.CargoWeight,
		arg.Tracking,
		arg.RequiresTarp,
	)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Origin,
		&i.DestinationLat,
		&i.DestinationLng,
		&i.OriginLat,
		&i.OriginLng,
		&i.Description,
		&i.CargoDescription,
		&i.PaymentDescription,
		&i.DeliveryDate,
		&i.PickupDate,
		&i.DeadlineDate,
		&i.Price,
		&i.Vehicle,
		&i.BodyType,
		&i.Kilometers,
		&i.CargoNature,
		&i.CargoType,
		&i.CargoWeight,
		&i.Tracking,
		&i.RequiresTarp,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
