// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trailer.sql

package db

import (
	"context"
	"database/sql"
)

const createTrailer = `-- name: CreateTrailer :one
INSERT INTO public.trailer
(id, license_plate, user_id, chassis, body_type, load_capacity, length, width, height, axles, state, renavan, status, created_at)
VALUES(nextval('trailer_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9,  $10, $11, true, now())
    RETURNING id, license_plate, user_id, chassis, body_type, load_capacity, length, width, height, axles, status, created_at, updated_at, state, renavan
`

type CreateTrailerParams struct {
	LicensePlate string          `json:"license_plate"`
	UserID       int64           `json:"user_id"`
	Chassis      string          `json:"chassis"`
	BodyType     sql.NullString  `json:"body_type"`
	LoadCapacity sql.NullFloat64 `json:"load_capacity"`
	Length       sql.NullFloat64 `json:"length"`
	Width        sql.NullFloat64 `json:"width"`
	Height       sql.NullFloat64 `json:"height"`
	Axles        int64           `json:"axles"`
	State        string          `json:"state"`
	Renavan      string          `json:"renavan"`
}

func (q *Queries) CreateTrailer(ctx context.Context, arg CreateTrailerParams) (Trailer, error) {
	row := q.db.QueryRowContext(ctx, createTrailer,
		arg.LicensePlate,
		arg.UserID,
		arg.Chassis,
		arg.BodyType,
		arg.LoadCapacity,
		arg.Length,
		arg.Width,
		arg.Height,
		arg.Axles,
		arg.State,
		arg.Renavan,
	)
	var i Trailer
	err := row.Scan(
		&i.ID,
		&i.LicensePlate,
		&i.UserID,
		&i.Chassis,
		&i.BodyType,
		&i.LoadCapacity,
		&i.Length,
		&i.Width,
		&i.Height,
		&i.Axles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.Renavan,
	)
	return i, err
}

const deleteTrailer = `-- name: DeleteTrailer :exec
UPDATE public.trailer
SET status=false, updated_at=now()
WHERE id=$1 AND
    user_id=$2
`

type DeleteTrailerParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteTrailer(ctx context.Context, arg DeleteTrailerParams) error {
	_, err := q.db.ExecContext(ctx, deleteTrailer, arg.ID, arg.UserID)
	return err
}

const getTrailerById = `-- name: GetTrailerById :one
SELECT id, license_plate, user_id, chassis, body_type, load_capacity, length, width, height, axles, status, created_at, updated_at, state, renavan
FROM public.trailer
WHERE id=$1 AND
    status=true
`

func (q *Queries) GetTrailerById(ctx context.Context, id int64) (Trailer, error) {
	row := q.db.QueryRowContext(ctx, getTrailerById, id)
	var i Trailer
	err := row.Scan(
		&i.ID,
		&i.LicensePlate,
		&i.UserID,
		&i.Chassis,
		&i.BodyType,
		&i.LoadCapacity,
		&i.Length,
		&i.Width,
		&i.Height,
		&i.Axles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.Renavan,
	)
	return i, err
}

const getTrailerByUserId = `-- name: GetTrailerByUserId :many
SELECT id, license_plate, user_id, chassis, body_type, load_capacity, length, width, height, axles, status, created_at, updated_at, state, renavan
FROM public.trailer
WHERE user_id=$1 AND
    status=true
`

func (q *Queries) GetTrailerByUserId(ctx context.Context, userID int64) ([]Trailer, error) {
	rows, err := q.db.QueryContext(ctx, getTrailerByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trailer
	for rows.Next() {
		var i Trailer
		if err := rows.Scan(
			&i.ID,
			&i.LicensePlate,
			&i.UserID,
			&i.Chassis,
			&i.BodyType,
			&i.LoadCapacity,
			&i.Length,
			&i.Width,
			&i.Height,
			&i.Axles,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.State,
			&i.Renavan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrailer = `-- name: UpdateTrailer :one
UPDATE public.trailer
SET license_plate=$1, chassis=$2, body_type=$3, load_capacity=$4, length=$5, width=$6, height=$7, axles=$8, state=$10, renavan=$11, updated_at=now()
WHERE id=$12 and
      user_id=$9
    RETURNING id, license_plate, user_id, chassis, body_type, load_capacity, length, width, height, axles, status, created_at, updated_at, state, renavan
`

type UpdateTrailerParams struct {
	LicensePlate string          `json:"license_plate"`
	Chassis      string          `json:"chassis"`
	BodyType     sql.NullString  `json:"body_type"`
	LoadCapacity sql.NullFloat64 `json:"load_capacity"`
	Length       sql.NullFloat64 `json:"length"`
	Width        sql.NullFloat64 `json:"width"`
	Height       sql.NullFloat64 `json:"height"`
	Axles        int64           `json:"axles"`
	UserID       int64           `json:"user_id"`
	State        string          `json:"state"`
	Renavan      string          `json:"renavan"`
	ID           int64           `json:"id"`
}

func (q *Queries) UpdateTrailer(ctx context.Context, arg UpdateTrailerParams) (Trailer, error) {
	row := q.db.QueryRowContext(ctx, updateTrailer,
		arg.LicensePlate,
		arg.Chassis,
		arg.BodyType,
		arg.LoadCapacity,
		arg.Length,
		arg.Width,
		arg.Height,
		arg.Axles,
		arg.UserID,
		arg.State,
		arg.Renavan,
		arg.ID,
	)
	var i Trailer
	err := row.Scan(
		&i.ID,
		&i.LicensePlate,
		&i.UserID,
		&i.Chassis,
		&i.BodyType,
		&i.LoadCapacity,
		&i.Length,
		&i.Width,
		&i.Height,
		&i.Axles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.Renavan,
	)
	return i, err
}
