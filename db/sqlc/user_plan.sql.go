// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_plan.sql

package db

import (
	"context"
	"time"
)

const createUserPlans = `-- name: CreateUserPlans :one
INSERT INTO public.user_plan
(id, id_user, id_plan, annual, active, active_date, expiration_date)
VALUES(nextval('user_plan_id_seq'::regclass), $1, $2, $3, true, now(), $4)
    RETURNING id, id_user, id_plan, annual, active, active_date, expiration_date
`

type CreateUserPlansParams struct {
	IDUser         int64     `json:"id_user"`
	IDPlan         int64     `json:"id_plan"`
	Annual         bool      `json:"annual"`
	ExpirationDate time.Time `json:"expiration_date"`
}

func (q *Queries) CreateUserPlans(ctx context.Context, arg CreateUserPlansParams) (UserPlan, error) {
	row := q.db.QueryRowContext(ctx, createUserPlans,
		arg.IDUser,
		arg.IDPlan,
		arg.Annual,
		arg.ExpirationDate,
	)
	var i UserPlan
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.IDPlan,
		&i.Annual,
		&i.Active,
		&i.ActiveDate,
		&i.ExpirationDate,
	)
	return i, err
}

const getUserPlanByIdUser = `-- name: GetUserPlanByIdUser :one
SELECT id, id_user, id_plan, annual, active, active_date, expiration_date
FROM public.user_plan
WHERE active=true AND
      id_user=$1 AND
      id_plan=$2
`

type GetUserPlanByIdUserParams struct {
	IDUser int64 `json:"id_user"`
	IDPlan int64 `json:"id_plan"`
}

func (q *Queries) GetUserPlanByIdUser(ctx context.Context, arg GetUserPlanByIdUserParams) (UserPlan, error) {
	row := q.db.QueryRowContext(ctx, getUserPlanByIdUser, arg.IDUser, arg.IDPlan)
	var i UserPlan
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.IDPlan,
		&i.Annual,
		&i.Active,
		&i.ActiveDate,
		&i.ExpirationDate,
	)
	return i, err
}

const updateUserPlan = `-- name: UpdateUserPlan :exec
UPDATE public.user_plan
SET active=false
WHERE id_user=$1 AND
      id_plan=$2
`

type UpdateUserPlanParams struct {
	IDUser int64 `json:"id_user"`
	IDPlan int64 `json:"id_plan"`
}

func (q *Queries) UpdateUserPlan(ctx context.Context, arg UpdateUserPlanParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPlan, arg.IDUser, arg.IDPlan)
	return err
}
