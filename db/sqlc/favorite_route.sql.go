// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: favorite_route.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createFavoriteRoute = `-- name: CreateFavoriteRoute :one
INSERT INTO public.favorite_route
(id, id_user, origin, destination, waypoints, response, created_at, status)
VALUES(nextval('favorite_route_id_seq'::regclass), $1, $2, $3, $4, $5, now(), true)
    RETURNING id, id_user, origin, destination, waypoints, response, status, created_at, updated_at
`

type CreateFavoriteRouteParams struct {
	IDUser      int64           `json:"id_user"`
	Origin      string          `json:"origin"`
	Destination string          `json:"destination"`
	Waypoints   sql.NullString  `json:"waypoints"`
	Response    json.RawMessage `json:"response"`
}

func (q *Queries) CreateFavoriteRoute(ctx context.Context, arg CreateFavoriteRouteParams) (FavoriteRoute, error) {
	row := q.db.QueryRowContext(ctx, createFavoriteRoute,
		arg.IDUser,
		arg.Origin,
		arg.Destination,
		arg.Waypoints,
		arg.Response,
	)
	var i FavoriteRoute
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Origin,
		&i.Destination,
		&i.Waypoints,
		&i.Response,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFavoriteByUserId = `-- name: GetFavoriteByUserId :many
SELECT id, id_user, origin, destination, waypoints, response, status, created_at, updated_at
FROM public.favorite_route
WHERE id_user = $1 AND
      status=true
`

func (q *Queries) GetFavoriteByUserId(ctx context.Context, idUser int64) ([]FavoriteRoute, error) {
	rows, err := q.db.QueryContext(ctx, getFavoriteByUserId, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FavoriteRoute
	for rows.Next() {
		var i FavoriteRoute
		if err := rows.Scan(
			&i.ID,
			&i.IDUser,
			&i.Origin,
			&i.Destination,
			&i.Waypoints,
			&i.Response,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFavorite = `-- name: RemoveFavorite :exec
UPDATE public.favorite_route
SET status=false, updated_at=now()
WHERE id = $1 AND
      id_user = $2
`

type RemoveFavoriteParams struct {
	ID     int64 `json:"id"`
	IDUser int64 `json:"id_user"`
}

func (q *Queries) RemoveFavorite(ctx context.Context, arg RemoveFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavorite, arg.ID, arg.IDUser)
	return err
}
