// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(name, email, password, google_id, profile_picture, status, phone, document, profile_id)
VALUES ($1, $2, $3, $4, $5, true, $6, $7, $8)
RETURNING id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture, status
`

type CreateUserParams struct {
	Name           string         `json:"name"`
	Email          string         `json:"email"`
	Password       sql.NullString `json:"password"`
	GoogleID       sql.NullString `json:"google_id"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Phone          sql.NullString `json:"phone"`
	Document       sql.NullString `json:"document"`
	ProfileID      sql.NullInt64  `json:"profile_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.GoogleID,
		arg.ProfilePicture,
		arg.Phone,
		arg.Document,
		arg.ProfileID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
		&i.Status,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
UPDATE users SET status = false WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture, status FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
		&i.Status,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users
SET name = $1,
    profile_picture = $2,
    state = $3,
    city = $4,
    neighborhood = $5,
    street = $6,
    street_number = $7,
    phone = $8,
    updated_at = now()

WHERE id = $9
    RETURNING id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture, status
`

type UpdateUserByIdParams struct {
	Name           string         `json:"name"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	State          sql.NullString `json:"state"`
	City           sql.NullString `json:"city"`
	Neighborhood   sql.NullString `json:"neighborhood"`
	Street         sql.NullString `json:"street"`
	StreetNumber   sql.NullString `json:"street_number"`
	Phone          sql.NullString `json:"phone"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserById,
		arg.Name,
		arg.ProfilePicture,
		arg.State,
		arg.City,
		arg.Neighborhood,
		arg.Street,
		arg.StreetNumber,
		arg.Phone,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
		&i.Status,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = $1
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	Password sql.NullString `json:"password"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
