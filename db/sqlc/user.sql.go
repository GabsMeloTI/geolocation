// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(name, email, password, google_id, profile_picture)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture
`

type CreateUserParams struct {
	Name           string         `json:"name"`
	Email          string         `json:"email"`
	Password       sql.NullString `json:"password"`
	GoogleID       sql.NullString `json:"google_id"`
	ProfilePicture sql.NullString `json:"profile_picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.GoogleID,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at, profile_id, document, state, city, neighborhood, street, street_number, phone, google_id, profile_picture FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileID,
		&i.Document,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.StreetNumber,
		&i.Phone,
		&i.GoogleID,
		&i.ProfilePicture,
	)
	return i, err
}
