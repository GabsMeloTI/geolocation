// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: saved_routes.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addSavedRoutesFavorite = `-- name: AddSavedRoutesFavorite :exec
UPDATE public.saved_routes
SET favorite=true, upated_at=now()
WHERE id = $1
`

func (q *Queries) AddSavedRoutesFavorite(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, addSavedRoutesFavorite, id)
	return err
}

const createSavedRoutes = `-- name: CreateSavedRoutes :one
INSERT INTO public.saved_routes
(id, origin, destination, waypoints, response, created_at)
VALUES(nextval('saved_routes_id_seq'::regclass), $1, $2, $3, $4, now())
    RETURNING id, origin, destination, waypoints, response, created_at, updated_at, favorite
`

type CreateSavedRoutesParams struct {
	Origin      string          `json:"origin"`
	Destination string          `json:"destination"`
	Waypoints   sql.NullString  `json:"waypoints"`
	Response    json.RawMessage `json:"response"`
}

func (q *Queries) CreateSavedRoutes(ctx context.Context, arg CreateSavedRoutesParams) (SavedRoute, error) {
	row := q.db.QueryRowContext(ctx, createSavedRoutes,
		arg.Origin,
		arg.Destination,
		arg.Waypoints,
		arg.Response,
	)
	var i SavedRoute
	err := row.Scan(
		&i.ID,
		&i.Origin,
		&i.Destination,
		&i.Waypoints,
		&i.Response,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Favorite,
	)
	return i, err
}

const getSavedRouteById = `-- name: GetSavedRouteById :one
SELECT id, origin, destination, waypoints, response, created_at, updated_at, favorite
FROM public.saved_routes
WHERE ID = $1
`

func (q *Queries) GetSavedRouteById(ctx context.Context, id int32) (SavedRoute, error) {
	row := q.db.QueryRowContext(ctx, getSavedRouteById, id)
	var i SavedRoute
	err := row.Scan(
		&i.ID,
		&i.Origin,
		&i.Destination,
		&i.Waypoints,
		&i.Response,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Favorite,
	)
	return i, err
}

const getSavedRoutes = `-- name: GetSavedRoutes :one
SELECT id, origin, destination, waypoints, response, created_at, updated_at, favorite
FROM public.saved_routes
WHERE origin = $1 AND
      destination = $2 AND
      waypoints = $3
`

type GetSavedRoutesParams struct {
	Origin      string         `json:"origin"`
	Destination string         `json:"destination"`
	Waypoints   sql.NullString `json:"waypoints"`
}

func (q *Queries) GetSavedRoutes(ctx context.Context, arg GetSavedRoutesParams) (SavedRoute, error) {
	row := q.db.QueryRowContext(ctx, getSavedRoutes, arg.Origin, arg.Destination, arg.Waypoints)
	var i SavedRoute
	err := row.Scan(
		&i.ID,
		&i.Origin,
		&i.Destination,
		&i.Waypoints,
		&i.Response,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Favorite,
	)
	return i, err
}
