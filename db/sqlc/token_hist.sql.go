// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token_hist.sql

package db

import (
	"context"
	"time"
)

const createTokenHist = `-- name: CreateTokenHist :one
INSERT INTO public.token_hist
(id, ip, number_request, created_at, exprited_at, "valid")
VALUES(nextval('token_hist_id_seq'::regclass), $1, $2, now(), $3, true)
    RETURNING id, ip, number_request, created_at, exprited_at, valid
`

type CreateTokenHistParams struct {
	Ip            string    `json:"ip"`
	NumberRequest int64     `json:"number_request"`
	ExpritedAt    time.Time `json:"exprited_at"`
}

func (q *Queries) CreateTokenHist(ctx context.Context, arg CreateTokenHistParams) (TokenHist, error) {
	row := q.db.QueryRowContext(ctx, createTokenHist, arg.Ip, arg.NumberRequest, arg.ExpritedAt)
	var i TokenHist
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.NumberRequest,
		&i.CreatedAt,
		&i.ExpritedAt,
		&i.Valid,
	)
	return i, err
}

const getTokenHist = `-- name: GetTokenHist :one
SELECT id, ip, number_request, created_at, exprited_at, valid
FROM public.token_hist
WHERE id=$1
`

func (q *Queries) GetTokenHist(ctx context.Context, id int64) (TokenHist, error) {
	row := q.db.QueryRowContext(ctx, getTokenHist, id)
	var i TokenHist
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.NumberRequest,
		&i.CreatedAt,
		&i.ExpritedAt,
		&i.Valid,
	)
	return i, err
}

const updateNumberOfRequest = `-- name: UpdateNumberOfRequest :exec
UPDATE public.token_hist
SET number_request = $1
WHERE id = $2
`

type UpdateNumberOfRequestParams struct {
	NumberRequest int64 `json:"number_request"`
	ID            int64 `json:"id"`
}

func (q *Queries) UpdateNumberOfRequest(ctx context.Context, arg UpdateNumberOfRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateNumberOfRequest, arg.NumberRequest, arg.ID)
	return err
}
