// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: active_freights.sql

package db

import (
	"context"
	"database/sql"
)

const createActiveFreight = `-- name: CreateActiveFreight :exec
INSERT INTO active_freights
(advertisement_id, advertisement_user_id, latitude, longitude, duration, distance, driver_name, tractor_unit_license_plate, trailer_license_plate, updated_at)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, now())
`

type CreateActiveFreightParams struct {
	AdvertisementID         int64          `json:"advertisement_id"`
	AdvertisementUserID     int64          `json:"advertisement_user_id"`
	Latitude                float64        `json:"latitude"`
	Longitude               float64        `json:"longitude"`
	Duration                string         `json:"duration"`
	Distance                string         `json:"distance"`
	DriverName              string         `json:"driver_name"`
	TractorUnitLicensePlate sql.NullString `json:"tractor_unit_license_plate"`
	TrailerLicensePlate     sql.NullString `json:"trailer_license_plate"`
}

func (q *Queries) CreateActiveFreight(ctx context.Context, arg CreateActiveFreightParams) error {
	_, err := q.db.ExecContext(ctx, createActiveFreight,
		arg.AdvertisementID,
		arg.AdvertisementUserID,
		arg.Latitude,
		arg.Longitude,
		arg.Duration,
		arg.Distance,
		arg.DriverName,
		arg.TractorUnitLicensePlate,
		arg.TrailerLicensePlate,
	)
	return err
}

const getActiveFreight = `-- name: GetActiveFreight :one
SELECT id, advertisement_id, advertisement_user_id, latitude, longitude, duration, distance, driver_name, tractor_unit_license_plate, trailer_license_plate, updated_at FROM active_freights
WHERE advertisement_id = $1
`

func (q *Queries) GetActiveFreight(ctx context.Context, advertisementID int64) (ActiveFreight, error) {
	row := q.db.QueryRowContext(ctx, getActiveFreight, advertisementID)
	var i ActiveFreight
	err := row.Scan(
		&i.ID,
		&i.AdvertisementID,
		&i.AdvertisementUserID,
		&i.Latitude,
		&i.Longitude,
		&i.Duration,
		&i.Distance,
		&i.DriverName,
		&i.TractorUnitLicensePlate,
		&i.TrailerLicensePlate,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllActiveFreights = `-- name: GetAllActiveFreights :many
SELECT id, advertisement_id, advertisement_user_id, latitude, longitude, duration, distance, driver_name, tractor_unit_license_plate, trailer_license_plate, updated_at FROM active_freights
WHERE advertisement_user_id = $1
`

func (q *Queries) GetAllActiveFreights(ctx context.Context, advertisementUserID int64) ([]ActiveFreight, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveFreights, advertisementUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveFreight
	for rows.Next() {
		var i ActiveFreight
		if err := rows.Scan(
			&i.ID,
			&i.AdvertisementID,
			&i.AdvertisementUserID,
			&i.Latitude,
			&i.Longitude,
			&i.Duration,
			&i.Distance,
			&i.DriverName,
			&i.TractorUnitLicensePlate,
			&i.TrailerLicensePlate,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActiveFreight = `-- name: UpdateActiveFreight :exec
UPDATE active_freights
SET latitude = $1,
    longitude = $2,
    duration = $3,
    distance = $4,
    updated_at = now()
WHERE id = $5
`

type UpdateActiveFreightParams struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Duration  string  `json:"duration"`
	Distance  string  `json:"distance"`
	ID        int64   `json:"id"`
}

func (q *Queries) UpdateActiveFreight(ctx context.Context, arg UpdateActiveFreightParams) error {
	_, err := q.db.ExecContext(ctx, updateActiveFreight,
		arg.Latitude,
		arg.Longitude,
		arg.Duration,
		arg.Distance,
		arg.ID,
	)
	return err
}
