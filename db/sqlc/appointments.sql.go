// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: appointments.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments
(id, advertisement_user_id, interested_user_id, offer_id, truck_id, advertisement_id, situation, status, created_who, created_at)
VALUES(nextval('appointments_id_seq'::regclass), $1, $2, $3, $4, $5,'ATIVO',
       true,$6,now())
    RETURNING id, advertisement_user_id, interested_user_id, offer_id, truck_id, advertisement_id, situation, status, created_who, created_at, updated_who, updated_at
`

type CreateAppointmentParams struct {
	AdvertisementUserID int64  `json:"advertisement_user_id"`
	InterestedUserID    int64  `json:"interested_user_id"`
	OfferID             int64  `json:"offer_id"`
	TruckID             int64  `json:"truck_id"`
	AdvertisementID     int64  `json:"advertisement_id"`
	CreatedWho          string `json:"created_who"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment,
		arg.AdvertisementUserID,
		arg.InterestedUserID,
		arg.OfferID,
		arg.TruckID,
		arg.AdvertisementID,
		arg.CreatedWho,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.AdvertisementUserID,
		&i.InterestedUserID,
		&i.OfferID,
		&i.TruckID,
		&i.AdvertisementID,
		&i.Situation,
		&i.Status,
		&i.CreatedWho,
		&i.CreatedAt,
		&i.UpdatedWho,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
UPDATE appointments
SET status=false, updated_at=now()
WHERE id=$1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, id)
	return err
}

const getAppointmentByID = `-- name: GetAppointmentByID :one
SELECT id, advertisement_user_id, interested_user_id, offer_id, truck_id, advertisement_id, situation, status, created_who, created_at, updated_who, updated_at
FROM appointments
WHERE id=$1
`

func (q *Queries) GetAppointmentByID(ctx context.Context, id int64) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentByID, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.AdvertisementUserID,
		&i.InterestedUserID,
		&i.OfferID,
		&i.TruckID,
		&i.AdvertisementID,
		&i.Situation,
		&i.Status,
		&i.CreatedWho,
		&i.CreatedAt,
		&i.UpdatedWho,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppointmentDetailsByAdvertisementId = `-- name: GetAppointmentDetailsByAdvertisementId :one
select a.advertisement_user_id, a.interested_user_id,tr.license_plate as trailer_license_plate, tu.license_plate as tractor_unit_license_plate, d.name, ad.destination_lat, ad.destination_lng from appointments a
     RIGHT JOIN advertisement ad on ad.id = a.advertisement_id
     RIGHT JOIN truck t on t.id = a.truck_id
     LEFT JOIN tractor_unit tu on tu.id = t.tractor_unit_id
     LEFT JOIN trailer tr on tr.id = t.trailer_id
     RIGHT JOIN driver d on d.id = t.driver_id
WHERE a.advertisement_id = $1
`

type GetAppointmentDetailsByAdvertisementIdRow struct {
	AdvertisementUserID     sql.NullInt64  `json:"advertisement_user_id"`
	InterestedUserID        sql.NullInt64  `json:"interested_user_id"`
	TrailerLicensePlate     sql.NullString `json:"trailer_license_plate"`
	TractorUnitLicensePlate sql.NullString `json:"tractor_unit_license_plate"`
	Name                    string         `json:"name"`
	DestinationLat          float64        `json:"destination_lat"`
	DestinationLng          float64        `json:"destination_lng"`
}

func (q *Queries) GetAppointmentDetailsByAdvertisementId(ctx context.Context, advertisementID int64) (GetAppointmentDetailsByAdvertisementIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentDetailsByAdvertisementId, advertisementID)
	var i GetAppointmentDetailsByAdvertisementIdRow
	err := row.Scan(
		&i.AdvertisementUserID,
		&i.InterestedUserID,
		&i.TrailerLicensePlate,
		&i.TractorUnitLicensePlate,
		&i.Name,
		&i.DestinationLat,
		&i.DestinationLng,
	)
	return i, err
}

const getListAppointmentByUserID = `-- name: GetListAppointmentByUserID :many
SELECT DISTINCT ON (ap.id) ap.id, advertisement_user_id, interested_user_id, offer_id, truck_id, advertisement_id, ap.situation, ap.status, ap.created_who, ap.created_at, ap.updated_who, ap.updated_at, u.id, u.name, email, password, u.created_at, u.updated_at, profile_id, document, u.state, u.city, u.neighborhood, u.street, u.street_number, u.phone, google_id, profile_picture, u.status, u.cep, u.complement, ad.id, ad.user_id, destination, origin, destination_lat, destination_lng, origin_lat, origin_lng, distance, pickup_date, delivery_date, expiration_date, title, cargo_type, cargo_species, cargo_weight, vehicles_accepted, trailer, requires_tarp, tracking, agency, description, payment_type, advance, toll, ad.situation, price, state_origin, city_origin, complement_origin, neighborhood_origin, street_origin, street_number_origin, cep_origin, state_destination, city_destination, complement_destination, neighborhood_destination, street_destination, street_number_destination, cep_destination, ad.status, ad.created_at, ad.created_who, ad.updated_at, ad.updated_who, tr.id, tractor_unit_id, trailer_id, tr.driver_id, tu.id, tu.license_plate, tu.driver_id, tu.user_id, tu.chassis, brand, model, manufacture_year, engine_power, unit_type, can_couple, tu.height, tu.axles, tu.status, tu.created_at, tu.updated_at, tu.state, tu.renavan, capacity, tu.width, tu.length, color, t.id, t.license_plate, t.user_id, t.chassis, body_type, load_capacity, t.length, t.width, t.height, t.axles, t.status, t.created_at, t.updated_at, t.state, t.renavan, d.id, d.user_id, birth_date, cpf, license_number, license_category, license_expiration_date, d.state, d.city, d.neighborhood, d.street, d.street_number, d.phone, d.status, d.created_at, d.updated_at, d.name, d.cep, d.complement
FROM appointments ap
         LEFT JOIN users u ON u.id IN (ap.advertisement_user_id, ap.interested_user_id) AND u.status = true
         LEFT JOIN advertisement ad ON ad.id = ap.advertisement_id AND ad.status = true
         LEFT JOIN truck tr ON tr.id = ap.truck_id
         LEFT JOIN tractor_unit tu ON tu.id = tr.tractor_unit_id AND tu.status = true
         LEFT JOIN trailer t ON t.id = tr.trailer_id AND t.status = true
         LEFT JOIN driver d ON d.id = tr.driver_id AND d.status = true
WHERE (ap.advertisement_user_id=$1 OR ap.interested_user_id=$1) AND ap.status = true
`

type GetListAppointmentByUserIDRow struct {
	ID                      int64           `json:"id"`
	AdvertisementUserID     int64           `json:"advertisement_user_id"`
	InterestedUserID        int64           `json:"interested_user_id"`
	OfferID                 int64           `json:"offer_id"`
	TruckID                 int64           `json:"truck_id"`
	AdvertisementID         int64           `json:"advertisement_id"`
	Situation               string          `json:"situation"`
	Status                  bool            `json:"status"`
	CreatedWho              string          `json:"created_who"`
	CreatedAt               time.Time       `json:"created_at"`
	UpdatedWho              sql.NullString  `json:"updated_who"`
	UpdatedAt               sql.NullTime    `json:"updated_at"`
	ID_2                    sql.NullInt64   `json:"id_2"`
	Name                    sql.NullString  `json:"name"`
	Email                   sql.NullString  `json:"email"`
	Password                sql.NullString  `json:"password"`
	CreatedAt_2             sql.NullTime    `json:"created_at_2"`
	UpdatedAt_2             sql.NullTime    `json:"updated_at_2"`
	ProfileID               sql.NullInt64   `json:"profile_id"`
	Document                sql.NullString  `json:"document"`
	State                   sql.NullString  `json:"state"`
	City                    sql.NullString  `json:"city"`
	Neighborhood            sql.NullString  `json:"neighborhood"`
	Street                  sql.NullString  `json:"street"`
	StreetNumber            sql.NullString  `json:"street_number"`
	Phone                   sql.NullString  `json:"phone"`
	GoogleID                sql.NullString  `json:"google_id"`
	ProfilePicture          sql.NullString  `json:"profile_picture"`
	Status_2                sql.NullBool    `json:"status_2"`
	Cep                     sql.NullString  `json:"cep"`
	Complement              sql.NullString  `json:"complement"`
	ID_3                    sql.NullInt64   `json:"id_3"`
	UserID                  sql.NullInt64   `json:"user_id"`
	Destination             sql.NullString  `json:"destination"`
	Origin                  sql.NullString  `json:"origin"`
	DestinationLat          sql.NullFloat64 `json:"destination_lat"`
	DestinationLng          sql.NullFloat64 `json:"destination_lng"`
	OriginLat               sql.NullFloat64 `json:"origin_lat"`
	OriginLng               sql.NullFloat64 `json:"origin_lng"`
	Distance                sql.NullInt64   `json:"distance"`
	PickupDate              sql.NullTime    `json:"pickup_date"`
	DeliveryDate            sql.NullTime    `json:"delivery_date"`
	ExpirationDate          sql.NullTime    `json:"expiration_date"`
	Title                   sql.NullString  `json:"title"`
	CargoType               sql.NullString  `json:"cargo_type"`
	CargoSpecies            sql.NullString  `json:"cargo_species"`
	CargoWeight             sql.NullFloat64 `json:"cargo_weight"`
	VehiclesAccepted        sql.NullString  `json:"vehicles_accepted"`
	Trailer                 sql.NullString  `json:"trailer"`
	RequiresTarp            sql.NullBool    `json:"requires_tarp"`
	Tracking                sql.NullBool    `json:"tracking"`
	Agency                  sql.NullBool    `json:"agency"`
	Description             sql.NullString  `json:"description"`
	PaymentType             sql.NullString  `json:"payment_type"`
	Advance                 sql.NullString  `json:"advance"`
	Toll                    sql.NullBool    `json:"toll"`
	Situation_2             sql.NullString  `json:"situation_2"`
	Price                   sql.NullFloat64 `json:"price"`
	StateOrigin             sql.NullString  `json:"state_origin"`
	CityOrigin              sql.NullString  `json:"city_origin"`
	ComplementOrigin        sql.NullString  `json:"complement_origin"`
	NeighborhoodOrigin      sql.NullString  `json:"neighborhood_origin"`
	StreetOrigin            sql.NullString  `json:"street_origin"`
	StreetNumberOrigin      sql.NullString  `json:"street_number_origin"`
	CepOrigin               sql.NullString  `json:"cep_origin"`
	StateDestination        sql.NullString  `json:"state_destination"`
	CityDestination         sql.NullString  `json:"city_destination"`
	ComplementDestination   sql.NullString  `json:"complement_destination"`
	NeighborhoodDestination sql.NullString  `json:"neighborhood_destination"`
	StreetDestination       sql.NullString  `json:"street_destination"`
	StreetNumberDestination sql.NullString  `json:"street_number_destination"`
	CepDestination          sql.NullString  `json:"cep_destination"`
	Status_3                sql.NullBool    `json:"status_3"`
	CreatedAt_3             sql.NullTime    `json:"created_at_3"`
	CreatedWho_2            sql.NullString  `json:"created_who_2"`
	UpdatedAt_3             sql.NullTime    `json:"updated_at_3"`
	UpdatedWho_2            sql.NullString  `json:"updated_who_2"`
	ID_4                    sql.NullInt64   `json:"id_4"`
	TractorUnitID           sql.NullInt64   `json:"tractor_unit_id"`
	TrailerID               sql.NullInt64   `json:"trailer_id"`
	DriverID                sql.NullInt64   `json:"driver_id"`
	ID_5                    sql.NullInt64   `json:"id_5"`
	LicensePlate            sql.NullString  `json:"license_plate"`
	DriverID_2              sql.NullInt64   `json:"driver_id_2"`
	UserID_2                sql.NullInt64   `json:"user_id_2"`
	Chassis                 sql.NullString  `json:"chassis"`
	Brand                   sql.NullString  `json:"brand"`
	Model                   sql.NullString  `json:"model"`
	ManufactureYear         sql.NullInt64   `json:"manufacture_year"`
	EnginePower             sql.NullString  `json:"engine_power"`
	UnitType                sql.NullString  `json:"unit_type"`
	CanCouple               sql.NullBool    `json:"can_couple"`
	Height                  sql.NullFloat64 `json:"height"`
	Axles                   sql.NullInt64   `json:"axles"`
	Status_4                sql.NullBool    `json:"status_4"`
	CreatedAt_4             sql.NullTime    `json:"created_at_4"`
	UpdatedAt_4             sql.NullTime    `json:"updated_at_4"`
	State_2                 sql.NullString  `json:"state_2"`
	Renavan                 sql.NullString  `json:"renavan"`
	Capacity                sql.NullString  `json:"capacity"`
	Width                   sql.NullFloat64 `json:"width"`
	Length                  sql.NullFloat64 `json:"length"`
	Color                   sql.NullString  `json:"color"`
	ID_6                    sql.NullInt64   `json:"id_6"`
	LicensePlate_2          sql.NullString  `json:"license_plate_2"`
	UserID_3                sql.NullInt64   `json:"user_id_3"`
	Chassis_2               sql.NullString  `json:"chassis_2"`
	BodyType                sql.NullString  `json:"body_type"`
	LoadCapacity            sql.NullFloat64 `json:"load_capacity"`
	Length_2                sql.NullFloat64 `json:"length_2"`
	Width_2                 sql.NullFloat64 `json:"width_2"`
	Height_2                sql.NullFloat64 `json:"height_2"`
	Axles_2                 sql.NullInt64   `json:"axles_2"`
	Status_5                sql.NullBool    `json:"status_5"`
	CreatedAt_5             sql.NullTime    `json:"created_at_5"`
	UpdatedAt_5             sql.NullTime    `json:"updated_at_5"`
	State_3                 sql.NullString  `json:"state_3"`
	Renavan_2               sql.NullString  `json:"renavan_2"`
	ID_7                    sql.NullInt64   `json:"id_7"`
	UserID_4                sql.NullInt64   `json:"user_id_4"`
	BirthDate               sql.NullTime    `json:"birth_date"`
	Cpf                     sql.NullString  `json:"cpf"`
	LicenseNumber           sql.NullString  `json:"license_number"`
	LicenseCategory         sql.NullString  `json:"license_category"`
	LicenseExpirationDate   sql.NullTime    `json:"license_expiration_date"`
	State_4                 sql.NullString  `json:"state_4"`
	City_2                  sql.NullString  `json:"city_2"`
	Neighborhood_2          sql.NullString  `json:"neighborhood_2"`
	Street_2                sql.NullString  `json:"street_2"`
	StreetNumber_2          sql.NullString  `json:"street_number_2"`
	Phone_2                 sql.NullString  `json:"phone_2"`
	Status_6                sql.NullBool    `json:"status_6"`
	CreatedAt_6             sql.NullTime    `json:"created_at_6"`
	UpdatedAt_6             sql.NullTime    `json:"updated_at_6"`
	Name_2                  sql.NullString  `json:"name_2"`
	Cep_2                   sql.NullString  `json:"cep_2"`
	Complement_2            sql.NullString  `json:"complement_2"`
}

func (q *Queries) GetListAppointmentByUserID(ctx context.Context, advertisementUserID int64) ([]GetListAppointmentByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getListAppointmentByUserID, advertisementUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListAppointmentByUserIDRow
	for rows.Next() {
		var i GetListAppointmentByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AdvertisementUserID,
			&i.InterestedUserID,
			&i.OfferID,
			&i.TruckID,
			&i.AdvertisementID,
			&i.Situation,
			&i.Status,
			&i.CreatedWho,
			&i.CreatedAt,
			&i.UpdatedWho,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ProfileID,
			&i.Document,
			&i.State,
			&i.City,
			&i.Neighborhood,
			&i.Street,
			&i.StreetNumber,
			&i.Phone,
			&i.GoogleID,
			&i.ProfilePicture,
			&i.Status_2,
			&i.Cep,
			&i.Complement,
			&i.ID_3,
			&i.UserID,
			&i.Destination,
			&i.Origin,
			&i.DestinationLat,
			&i.DestinationLng,
			&i.OriginLat,
			&i.OriginLng,
			&i.Distance,
			&i.PickupDate,
			&i.DeliveryDate,
			&i.ExpirationDate,
			&i.Title,
			&i.CargoType,
			&i.CargoSpecies,
			&i.CargoWeight,
			&i.VehiclesAccepted,
			&i.Trailer,
			&i.RequiresTarp,
			&i.Tracking,
			&i.Agency,
			&i.Description,
			&i.PaymentType,
			&i.Advance,
			&i.Toll,
			&i.Situation_2,
			&i.Price,
			&i.StateOrigin,
			&i.CityOrigin,
			&i.ComplementOrigin,
			&i.NeighborhoodOrigin,
			&i.StreetOrigin,
			&i.StreetNumberOrigin,
			&i.CepOrigin,
			&i.StateDestination,
			&i.CityDestination,
			&i.ComplementDestination,
			&i.NeighborhoodDestination,
			&i.StreetDestination,
			&i.StreetNumberDestination,
			&i.CepDestination,
			&i.Status_3,
			&i.CreatedAt_3,
			&i.CreatedWho_2,
			&i.UpdatedAt_3,
			&i.UpdatedWho_2,
			&i.ID_4,
			&i.TractorUnitID,
			&i.TrailerID,
			&i.DriverID,
			&i.ID_5,
			&i.LicensePlate,
			&i.DriverID_2,
			&i.UserID_2,
			&i.Chassis,
			&i.Brand,
			&i.Model,
			&i.ManufactureYear,
			&i.EnginePower,
			&i.UnitType,
			&i.CanCouple,
			&i.Height,
			&i.Axles,
			&i.Status_4,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.State_2,
			&i.Renavan,
			&i.Capacity,
			&i.Width,
			&i.Length,
			&i.Color,
			&i.ID_6,
			&i.LicensePlate_2,
			&i.UserID_3,
			&i.Chassis_2,
			&i.BodyType,
			&i.LoadCapacity,
			&i.Length_2,
			&i.Width_2,
			&i.Height_2,
			&i.Axles_2,
			&i.Status_5,
			&i.CreatedAt_5,
			&i.UpdatedAt_5,
			&i.State_3,
			&i.Renavan_2,
			&i.ID_7,
			&i.UserID_4,
			&i.BirthDate,
			&i.Cpf,
			&i.LicenseNumber,
			&i.LicenseCategory,
			&i.LicenseExpirationDate,
			&i.State_4,
			&i.City_2,
			&i.Neighborhood_2,
			&i.Street_2,
			&i.StreetNumber_2,
			&i.Phone_2,
			&i.Status_6,
			&i.CreatedAt_6,
			&i.UpdatedAt_6,
			&i.Name_2,
			&i.Cep_2,
			&i.Complement_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentSituation = `-- name: UpdateAppointmentSituation :exec
UPDATE appointments
SET situation=$1, updated_who=$2, updated_at=now()
WHERE id=$3
    RETURNING id, advertisement_user_id, interested_user_id, offer_id, truck_id, advertisement_id, situation, status, created_who, created_at, updated_who, updated_at
`

type UpdateAppointmentSituationParams struct {
	Situation  string         `json:"situation"`
	UpdatedWho sql.NullString `json:"updated_who"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateAppointmentSituation(ctx context.Context, arg UpdateAppointmentSituationParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointmentSituation, arg.Situation, arg.UpdatedWho, arg.ID)
	return err
}
