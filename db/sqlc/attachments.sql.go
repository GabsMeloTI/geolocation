// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attachments.sql

package db

import (
	"context"
	"database/sql"
)

const createAttachments = `-- name: CreateAttachments :one
INSERT INTO public.attachments
(id, user_id, description, url, name_file, size_file, type, status, created_at)
VALUES(nextval('attachments_id_seq'::regclass), $1, $2, $3, $4, $5, $6, true, now())
    RETURNING id, user_id, description, url, name_file, size_file, type, status, created_at, updated_at
`

type CreateAttachmentsParams struct {
	UserID      int64          `json:"user_id"`
	Description sql.NullString `json:"description"`
	Url         string         `json:"url"`
	NameFile    sql.NullString `json:"name_file"`
	SizeFile    sql.NullInt64  `json:"size_file"`
	Type        string         `json:"type"`
}

func (q *Queries) CreateAttachments(ctx context.Context, arg CreateAttachmentsParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, createAttachments,
		arg.UserID,
		arg.Description,
		arg.Url,
		arg.NameFile,
		arg.SizeFile,
		arg.Type,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Url,
		&i.NameFile,
		&i.SizeFile,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAttachmentById = `-- name: GetAllAttachmentById :many
SELECT id, user_id, description, url, name_file, size_file, type, status, created_at, updated_at
FROM public.attachments
WHERE user_id=$1 AND type=$2 AND status=true
`

type GetAllAttachmentByIdParams struct {
	UserID int64  `json:"user_id"`
	Type   string `json:"type"`
}

func (q *Queries) GetAllAttachmentById(ctx context.Context, arg GetAllAttachmentByIdParams) ([]Attachment, error) {
	rows, err := q.db.QueryContext(ctx, getAllAttachmentById, arg.UserID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attachment
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Url,
			&i.NameFile,
			&i.SizeFile,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttachmentById = `-- name: GetAttachmentById :one
SELECT id, user_id, description, url, name_file, size_file, type, status, created_at, updated_at
FROM public.attachments
WHERE user_id=$1 AND type=$2 AND status=true
`

type GetAttachmentByIdParams struct {
	UserID int64  `json:"user_id"`
	Type   string `json:"type"`
}

func (q *Queries) GetAttachmentById(ctx context.Context, arg GetAttachmentByIdParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, getAttachmentById, arg.UserID, arg.Type)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Url,
		&i.NameFile,
		&i.SizeFile,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAttachmentLogicDelete = `-- name: UpdateAttachmentLogicDelete :exec
UPDATE public.attachments
SET status=false, updated_at=now()
WHERE user_id = $1
      AND type=$2
`

type UpdateAttachmentLogicDeleteParams struct {
	UserID int64  `json:"user_id"`
	Type   string `json:"type"`
}

func (q *Queries) UpdateAttachmentLogicDelete(ctx context.Context, arg UpdateAttachmentLogicDeleteParams) error {
	_, err := q.db.ExecContext(ctx, updateAttachmentLogicDelete, arg.UserID, arg.Type)
	return err
}
