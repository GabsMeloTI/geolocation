// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: attachments.sql

package db

import (
	"context"
	"database/sql"
)

const createAttachments = `-- name: CreateAttachments :one
INSERT INTO public.attachments
(id, user_id, description, url, name_file, size_file, status, created_at)
VALUES(nextval('attachments_id_seq'::regclass), $1, $2, $3, $4, $5, true, now())
    RETURNING id, user_id, description, url, name_file, size_file, status, created_at, updated_at
`

type CreateAttachmentsParams struct {
	UserID      int64          `json:"user_id"`
	Description sql.NullString `json:"description"`
	Url         string         `json:"url"`
	NameFile    sql.NullString `json:"name_file"`
	SizeFile    sql.NullInt64  `json:"size_file"`
}

func (q *Queries) CreateAttachments(ctx context.Context, arg CreateAttachmentsParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, createAttachments,
		arg.UserID,
		arg.Description,
		arg.Url,
		arg.NameFile,
		arg.SizeFile,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Url,
		&i.NameFile,
		&i.SizeFile,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttachmentById = `-- name: GetAttachmentById :one
SELECT id, user_id, description, url, name_file, size_file, status, created_at, updated_at
FROM public.attachments
WHERE id=$1
`

func (q *Queries) GetAttachmentById(ctx context.Context, id int64) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, getAttachmentById, id)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Url,
		&i.NameFile,
		&i.SizeFile,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAttachmentLogicDelete = `-- name: UpdateAttachmentLogicDelete :exec
UPDATE public.attachments
SET status=false, updated_at=now()
WHERE id = $1
`

func (q *Queries) UpdateAttachmentLogicDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateAttachmentLogicDelete, id)
	return err
}
