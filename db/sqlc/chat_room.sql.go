// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat_room.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createChatRoom = `-- name: CreateChatRoom :one

INSERT INTO chat_rooms
(id, advertisement_id, advertisement_user_id, interested_user_id, status, created_at)
VALUES
(nextval('chat_rooms_id_seq'::regclass), $1, $2, $3, true, now())
RETURNING id, advertisement_id, advertisement_user_id, interested_user_id, status, created_at, updated_at
`

type CreateChatRoomParams struct {
	AdvertisementID     int64 `json:"advertisement_id"`
	AdvertisementUserID int64 `json:"advertisement_user_id"`
	InterestedUserID    int64 `json:"interested_user_id"`
}

func (q *Queries) CreateChatRoom(ctx context.Context, arg CreateChatRoomParams) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, createChatRoom, arg.AdvertisementID, arg.AdvertisementUserID, arg.InterestedUserID)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.AdvertisementID,
		&i.AdvertisementUserID,
		&i.InterestedUserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdvertisementChatRooms = `-- name: GetAdvertisementChatRooms :many
SELECT 
    r.id AS room_id, 
    r.created_at, 
    r.advertisement_user_id, 
    a.id AS advertisement_id, 
    a.origin, 
    a.destination, 
    a.distance, 
    a.title,
    COALESCE((SELECT SUM(CASE WHEN m.is_read = FALSE AND m.user_id <> $1 THEN 1 ELSE 0 END)
     FROM chat_messages m
     WHERE m.room_id = r.id),0::bigint)::bigint AS unread_count
FROM chat_rooms r
JOIN "advertisement" a ON a.id = r.advertisement_id
WHERE r.advertisement_user_id = $1
`

type GetAdvertisementChatRoomsRow struct {
	RoomID              int64     `json:"room_id"`
	CreatedAt           time.Time `json:"created_at"`
	AdvertisementUserID int64     `json:"advertisement_user_id"`
	AdvertisementID     int64     `json:"advertisement_id"`
	Origin              string    `json:"origin"`
	Destination         string    `json:"destination"`
	Distance            int64     `json:"distance"`
	Title               string    `json:"title"`
	UnreadCount         int64     `json:"unread_count"`
}

func (q *Queries) GetAdvertisementChatRooms(ctx context.Context, userID sql.NullInt64) ([]GetAdvertisementChatRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAdvertisementChatRooms, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdvertisementChatRoomsRow
	for rows.Next() {
		var i GetAdvertisementChatRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.CreatedAt,
			&i.AdvertisementUserID,
			&i.AdvertisementID,
			&i.Origin,
			&i.Destination,
			&i.Distance,
			&i.Title,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomByAdvertisementAndInterestedUser = `-- name: GetChatRoomByAdvertisementAndInterestedUser :one
select r.id, r.advertisement_id, r.advertisement_user_id, r.interested_user_id, r.status, r.created_at, r.updated_at from chat_rooms r
where r.advertisement_id = $1 and r.interested_user_id = $2 AND status
`

type GetChatRoomByAdvertisementAndInterestedUserParams struct {
	AdvertisementID  int64 `json:"advertisement_id"`
	InterestedUserID int64 `json:"interested_user_id"`
}

func (q *Queries) GetChatRoomByAdvertisementAndInterestedUser(ctx context.Context, arg GetChatRoomByAdvertisementAndInterestedUserParams) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, getChatRoomByAdvertisementAndInterestedUser, arg.AdvertisementID, arg.InterestedUserID)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.AdvertisementID,
		&i.AdvertisementUserID,
		&i.InterestedUserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatRoomById = `-- name: GetChatRoomById :one
SELECT r.id, r.advertisement_id, r.advertisement_user_id, r.interested_user_id, r.status, r.created_at, r.updated_at, a.id as advertisement_id, a.origin, a.destination, a.distance FROM chat_rooms r
JOIN "advertisement" a ON a.id = r.advertisement_id
WHERE r.id = $1
`

type GetChatRoomByIdRow struct {
	ID                  int64        `json:"id"`
	AdvertisementID     int64        `json:"advertisement_id"`
	AdvertisementUserID int64        `json:"advertisement_user_id"`
	InterestedUserID    int64        `json:"interested_user_id"`
	Status              bool         `json:"status"`
	CreatedAt           time.Time    `json:"created_at"`
	UpdatedAt           sql.NullTime `json:"updated_at"`
	AdvertisementID_2   int64        `json:"advertisement_id_2"`
	Origin              string       `json:"origin"`
	Destination         string       `json:"destination"`
	Distance            int64        `json:"distance"`
}

func (q *Queries) GetChatRoomById(ctx context.Context, id int64) (GetChatRoomByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getChatRoomById, id)
	var i GetChatRoomByIdRow
	err := row.Scan(
		&i.ID,
		&i.AdvertisementID,
		&i.AdvertisementUserID,
		&i.InterestedUserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdvertisementID_2,
		&i.Origin,
		&i.Destination,
		&i.Distance,
	)
	return i, err
}

const getInterestedChatRooms = `-- name: GetInterestedChatRooms :many
SELECT 
    r.id AS room_id, 
    r.created_at, 
    r.advertisement_user_id, 
    a.id AS advertisement_id, 
    a.origin, 
    a.destination, 
    a.distance, 
    a.title,
   COALESCE( (SELECT SUM(CASE WHEN m.is_read = FALSE AND m.user_id <> $1 THEN 1 ELSE 0 END)
     FROM chat_messages m
     WHERE m.room_id = r.id),0::bigint)::bigint AS unread_count
FROM chat_rooms r
JOIN "advertisement" a ON a.id = r.advertisement_id
WHERE r.interested_user_id = $1
`

type GetInterestedChatRoomsRow struct {
	RoomID              int64     `json:"room_id"`
	CreatedAt           time.Time `json:"created_at"`
	AdvertisementUserID int64     `json:"advertisement_user_id"`
	AdvertisementID     int64     `json:"advertisement_id"`
	Origin              string    `json:"origin"`
	Destination         string    `json:"destination"`
	Distance            int64     `json:"distance"`
	Title               string    `json:"title"`
	UnreadCount         int64     `json:"unread_count"`
}

func (q *Queries) GetInterestedChatRooms(ctx context.Context, userID sql.NullInt64) ([]GetInterestedChatRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getInterestedChatRooms, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInterestedChatRoomsRow
	for rows.Next() {
		var i GetInterestedChatRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.CreatedAt,
			&i.AdvertisementUserID,
			&i.AdvertisementID,
			&i.Origin,
			&i.Destination,
			&i.Distance,
			&i.Title,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
