// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: zonas_risco.sql

package db

import (
	"context"
	"database/sql"
)

const createZonaRisco = `-- name: CreateZonaRisco :one
INSERT INTO zonas_risco (name, cep, lat, lng, radius, type, status)
VALUES ($1, $2, $3, $4, $5, $6, true)
RETURNING id, name, cep, lat, lng, radius, type, status
`

type CreateZonaRiscoParams struct {
	Name   string        `json:"name"`
	Cep    string        `json:"cep"`
	Lat    float64       `json:"lat"`
	Lng    float64       `json:"lng"`
	Radius int64         `json:"radius"`
	Type   sql.NullInt64 `json:"type"`
}

func (q *Queries) CreateZonaRisco(ctx context.Context, arg CreateZonaRiscoParams) (ZonasRisco, error) {
	row := q.db.QueryRowContext(ctx, createZonaRisco,
		arg.Name,
		arg.Cep,
		arg.Lat,
		arg.Lng,
		arg.Radius,
		arg.Type,
	)
	var i ZonasRisco
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cep,
		&i.Lat,
		&i.Lng,
		&i.Radius,
		&i.Type,
		&i.Status,
	)
	return i, err
}

const deleteZonaRisco = `-- name: DeleteZonaRisco :exec
UPDATE zonas_risco
SET status = false
WHERE id = $1
`

func (q *Queries) DeleteZonaRisco(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteZonaRisco, id)
	return err
}

const getAllZonasRisco = `-- name: GetAllZonasRisco :many
SELECT id, name, cep, lat, lng, radius, type, status FROM zonas_risco WHERE status = true
`

func (q *Queries) GetAllZonasRisco(ctx context.Context) ([]ZonasRisco, error) {
	rows, err := q.db.QueryContext(ctx, getAllZonasRisco)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ZonasRisco
	for rows.Next() {
		var i ZonasRisco
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cep,
			&i.Lat,
			&i.Lng,
			&i.Radius,
			&i.Type,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZonaRiscoById = `-- name: GetZonaRiscoById :one
SELECT id, name, cep, lat, lng, radius, type, status FROM zonas_risco WHERE id = $1 AND status = true
`

func (q *Queries) GetZonaRiscoById(ctx context.Context, id int64) (ZonasRisco, error) {
	row := q.db.QueryRowContext(ctx, getZonaRiscoById, id)
	var i ZonasRisco
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cep,
		&i.Lat,
		&i.Lng,
		&i.Radius,
		&i.Type,
		&i.Status,
	)
	return i, err
}

const updateZonaRisco = `-- name: UpdateZonaRisco :one
UPDATE zonas_risco
SET name = $2, cep = $3, lat = $4, lng = $5, radius = $6, type= $7
WHERE id = $1 and status = true
RETURNING id, name, cep, lat, lng, radius, type, status
`

type UpdateZonaRiscoParams struct {
	ID     int64         `json:"id"`
	Name   string        `json:"name"`
	Cep    string        `json:"cep"`
	Lat    float64       `json:"lat"`
	Lng    float64       `json:"lng"`
	Radius int64         `json:"radius"`
	Type   sql.NullInt64 `json:"type"`
}

func (q *Queries) UpdateZonaRisco(ctx context.Context, arg UpdateZonaRiscoParams) (ZonasRisco, error) {
	row := q.db.QueryRowContext(ctx, updateZonaRisco,
		arg.ID,
		arg.Name,
		arg.Cep,
		arg.Lat,
		arg.Lng,
		arg.Radius,
		arg.Type,
	)
	var i ZonasRisco
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cep,
		&i.Lat,
		&i.Lng,
		&i.Radius,
		&i.Type,
		&i.Status,
	)
	return i, err
}
