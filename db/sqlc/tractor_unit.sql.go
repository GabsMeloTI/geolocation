// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: tractor_unit.sql

package db

import (
	"context"
	"database/sql"
)

const createTractorUnit = `-- name: CreateTractorUnit :one
INSERT INTO public.tractor_unit
(id, license_plate, driver_id, user_id, chassis, brand, model, manufacture_year, engine_power, unit_type, can_couple, height, axles, state, renavan, capacity, width, length, color, status, created_at)
VALUES(nextval('tractor_unit_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, true, now())
    RETURNING id, license_plate, driver_id, user_id, chassis, brand, model, manufacture_year, engine_power, unit_type, can_couple, height, axles, status, created_at, updated_at, state, renavan, capacity, width, length, color
`

type CreateTractorUnitParams struct {
	LicensePlate    string         `json:"license_plate"`
	DriverID        int64          `json:"driver_id"`
	UserID          int64          `json:"user_id"`
	Chassis         string         `json:"chassis"`
	Brand           string         `json:"brand"`
	Model           string         `json:"model"`
	ManufactureYear sql.NullInt64  `json:"manufacture_year"`
	EnginePower     sql.NullString `json:"engine_power"`
	UnitType        sql.NullString `json:"unit_type"`
	CanCouple       sql.NullBool   `json:"can_couple"`
	Height          float64        `json:"height"`
	Axles           int64          `json:"axles"`
	State           string         `json:"state"`
	Renavan         string         `json:"renavan"`
	Capacity        string         `json:"capacity"`
	Width           float64        `json:"width"`
	Length          float64        `json:"length"`
	Color           string         `json:"color"`
}

func (q *Queries) CreateTractorUnit(ctx context.Context, arg CreateTractorUnitParams) (TractorUnit, error) {
	row := q.db.QueryRowContext(ctx, createTractorUnit,
		arg.LicensePlate,
		arg.DriverID,
		arg.UserID,
		arg.Chassis,
		arg.Brand,
		arg.Model,
		arg.ManufactureYear,
		arg.EnginePower,
		arg.UnitType,
		arg.CanCouple,
		arg.Height,
		arg.Axles,
		arg.State,
		arg.Renavan,
		arg.Capacity,
		arg.Width,
		arg.Length,
		arg.Color,
	)
	var i TractorUnit
	err := row.Scan(
		&i.ID,
		&i.LicensePlate,
		&i.DriverID,
		&i.UserID,
		&i.Chassis,
		&i.Brand,
		&i.Model,
		&i.ManufactureYear,
		&i.EnginePower,
		&i.UnitType,
		&i.CanCouple,
		&i.Height,
		&i.Axles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.Renavan,
		&i.Capacity,
		&i.Width,
		&i.Length,
		&i.Color,
	)
	return i, err
}

const deleteTractorUnit = `-- name: DeleteTractorUnit :exec
UPDATE public.tractor_unit
SET status=false, updated_at=now()
WHERE id=$1
`

func (q *Queries) DeleteTractorUnit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTractorUnit, id)
	return err
}

const getTractorUnitById = `-- name: GetTractorUnitById :one
SELECT id, license_plate, driver_id, user_id, chassis, brand, model, manufacture_year, engine_power, unit_type, can_couple, height, axles, status, created_at, updated_at, state, renavan, capacity, width, length, color
FROM public.tractor_unit
WHERE id=$1
`

func (q *Queries) GetTractorUnitById(ctx context.Context, id int64) (TractorUnit, error) {
	row := q.db.QueryRowContext(ctx, getTractorUnitById, id)
	var i TractorUnit
	err := row.Scan(
		&i.ID,
		&i.LicensePlate,
		&i.DriverID,
		&i.UserID,
		&i.Chassis,
		&i.Brand,
		&i.Model,
		&i.ManufactureYear,
		&i.EnginePower,
		&i.UnitType,
		&i.CanCouple,
		&i.Height,
		&i.Axles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.Renavan,
		&i.Capacity,
		&i.Width,
		&i.Length,
		&i.Color,
	)
	return i, err
}

const getTractorUnitByUserId = `-- name: GetTractorUnitByUserId :many
SELECT id, license_plate, driver_id, user_id, chassis, brand, model, manufacture_year, engine_power, unit_type, can_couple, height, axles, status, created_at, updated_at, state, renavan, capacity, width, length, color
FROM public.tractor_unit
WHERE user_id=$1
`

func (q *Queries) GetTractorUnitByUserId(ctx context.Context, userID int64) ([]TractorUnit, error) {
	rows, err := q.db.QueryContext(ctx, getTractorUnitByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TractorUnit
	for rows.Next() {
		var i TractorUnit
		if err := rows.Scan(
			&i.ID,
			&i.LicensePlate,
			&i.DriverID,
			&i.UserID,
			&i.Chassis,
			&i.Brand,
			&i.Model,
			&i.ManufactureYear,
			&i.EnginePower,
			&i.UnitType,
			&i.CanCouple,
			&i.Height,
			&i.Axles,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.State,
			&i.Renavan,
			&i.Capacity,
			&i.Width,
			&i.Length,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTractorUnit = `-- name: UpdateTractorUnit :one
UPDATE public.tractor_unit
SET license_plate=$1, driver_id=$2, chassis=$3, brand=$4, model=$5, manufacture_year=$6, engine_power=$7, unit_type=$8, height=$9, user_id=$10, axles=$11, state=$12, renavan=$13, capacity=$14, width=$15, length=$16, color=$17, updated_at=now()
WHERE id=$18
    RETURNING id, license_plate, driver_id, user_id, chassis, brand, model, manufacture_year, engine_power, unit_type, can_couple, height, axles, status, created_at, updated_at, state, renavan, capacity, width, length, color
`

type UpdateTractorUnitParams struct {
	LicensePlate    string         `json:"license_plate"`
	DriverID        int64          `json:"driver_id"`
	Chassis         string         `json:"chassis"`
	Brand           string         `json:"brand"`
	Model           string         `json:"model"`
	ManufactureYear sql.NullInt64  `json:"manufacture_year"`
	EnginePower     sql.NullString `json:"engine_power"`
	UnitType        sql.NullString `json:"unit_type"`
	Height          float64        `json:"height"`
	UserID          int64          `json:"user_id"`
	Axles           int64          `json:"axles"`
	State           string         `json:"state"`
	Renavan         string         `json:"renavan"`
	Capacity        string         `json:"capacity"`
	Width           float64        `json:"width"`
	Length          float64        `json:"length"`
	Color           string         `json:"color"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateTractorUnit(ctx context.Context, arg UpdateTractorUnitParams) (TractorUnit, error) {
	row := q.db.QueryRowContext(ctx, updateTractorUnit,
		arg.LicensePlate,
		arg.DriverID,
		arg.Chassis,
		arg.Brand,
		arg.Model,
		arg.ManufactureYear,
		arg.EnginePower,
		arg.UnitType,
		arg.Height,
		arg.UserID,
		arg.Axles,
		arg.State,
		arg.Renavan,
		arg.Capacity,
		arg.Width,
		arg.Length,
		arg.Color,
		arg.ID,
	)
	var i TractorUnit
	err := row.Scan(
		&i.ID,
		&i.LicensePlate,
		&i.DriverID,
		&i.UserID,
		&i.Chassis,
		&i.Brand,
		&i.Model,
		&i.ManufactureYear,
		&i.EnginePower,
		&i.UnitType,
		&i.CanCouple,
		&i.Height,
		&i.Axles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.Renavan,
		&i.Capacity,
		&i.Width,
		&i.Length,
		&i.Color,
	)
	return i, err
}
