// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const findAddressGroupedByCEP = `-- name: FindAddressGroupedByCEP :many
SELECT
    c.name AS city_name,
    st.uf AS state_uf,
    n.name as neighborhood_name,
    s.name as street_name,
    a.lat as latitude,
    a.lat as longitude
FROM addresses a
         JOIN streets s ON a.street_id = s.id
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
WHERE a.cep = $1
GROUP BY c.name, st.uf,  n.name, s.name, a.lat, a.lon
    LIMIT 100
`

type FindAddressGroupedByCEPRow struct {
	CityName         string          `json:"city_name"`
	StateUf          string          `json:"state_uf"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	StreetName       string          `json:"street_name"`
	Latitude         sql.NullFloat64 `json:"latitude"`
	Longitude        sql.NullFloat64 `json:"longitude"`
}

func (q *Queries) FindAddressGroupedByCEP(ctx context.Context, cep string) ([]FindAddressGroupedByCEPRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressGroupedByCEP, cep)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressGroupedByCEPRow
	for rows.Next() {
		var i FindAddressGroupedByCEPRow
		if err := rows.Scan(
			&i.CityName,
			&i.StateUf,
			&i.NeighborhoodName,
			&i.StreetName,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAddressesByCEP = `-- name: FindAddressesByCEP :many
SELECT
    s.id AS street_id,
    s.name AS street_name,
    n.name AS neighborhood_name,
    n.lat AS neighborhood_lat,
    n.lon AS neighborhood_lon,
    c.name AS city_name,
    c.lat AS city_lat,
    c.lon AS city_lon,
    st.uf AS state_uf,
    st.lat AS state_lat,
    st.lon AS state_lon,
    a.id AS address_id,
    a.number,
    a.cep,
    a.lat,
    a.lon
FROM addresses a
         JOIN streets s ON a.street_id = s.id
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
WHERE a.cep = $1
limit 100
`

type FindAddressesByCEPRow struct {
	StreetID         int32           `json:"street_id"`
	StreetName       string          `json:"street_name"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	NeighborhoodLat  sql.NullFloat64 `json:"neighborhood_lat"`
	NeighborhoodLon  sql.NullFloat64 `json:"neighborhood_lon"`
	CityName         string          `json:"city_name"`
	CityLat          sql.NullFloat64 `json:"city_lat"`
	CityLon          sql.NullFloat64 `json:"city_lon"`
	StateUf          string          `json:"state_uf"`
	StateLat         sql.NullFloat64 `json:"state_lat"`
	StateLon         sql.NullFloat64 `json:"state_lon"`
	AddressID        int32           `json:"address_id"`
	Number           sql.NullString  `json:"number"`
	Cep              string          `json:"cep"`
	Lat              sql.NullFloat64 `json:"lat"`
	Lon              sql.NullFloat64 `json:"lon"`
}

func (q *Queries) FindAddressesByCEP(ctx context.Context, cep string) ([]FindAddressesByCEPRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressesByCEP, cep)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressesByCEPRow
	for rows.Next() {
		var i FindAddressesByCEPRow
		if err := rows.Scan(
			&i.StreetID,
			&i.StreetName,
			&i.NeighborhoodName,
			&i.NeighborhoodLat,
			&i.NeighborhoodLon,
			&i.CityName,
			&i.CityLat,
			&i.CityLon,
			&i.StateUf,
			&i.StateLat,
			&i.StateLon,
			&i.AddressID,
			&i.Number,
			&i.Cep,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAddressesByLatLon = `-- name: FindAddressesByLatLon :many
SELECT
    s.id AS street_id,
    s.name AS street_name,
    n.name AS neighborhood_name,
    n.lat AS neighborhood_lat,
    n.lon AS neighborhood_lon,
    c.name AS city_name,
    c.lat AS city_lat,
    c.lon AS city_lon,
    st.uf AS state_uf,
    st.lat AS state_lat,
    st.lon AS state_lon,
    a.id AS address_id,
    a.number,
    a.cep,
    a.lat,
    a.lon
FROM addresses a
         JOIN streets s ON a.street_id = s.id
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
ORDER BY (a.lat - $1) * (a.lat - $1) + (a.lon - $2) * (a.lon - $2) ASC
limit 100
`

type FindAddressesByLatLonParams struct {
	Lat sql.NullFloat64 `json:"lat"`
	Lon sql.NullFloat64 `json:"lon"`
}

type FindAddressesByLatLonRow struct {
	StreetID         int32           `json:"street_id"`
	StreetName       string          `json:"street_name"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	NeighborhoodLat  sql.NullFloat64 `json:"neighborhood_lat"`
	NeighborhoodLon  sql.NullFloat64 `json:"neighborhood_lon"`
	CityName         string          `json:"city_name"`
	CityLat          sql.NullFloat64 `json:"city_lat"`
	CityLon          sql.NullFloat64 `json:"city_lon"`
	StateUf          string          `json:"state_uf"`
	StateLat         sql.NullFloat64 `json:"state_lat"`
	StateLon         sql.NullFloat64 `json:"state_lon"`
	AddressID        int32           `json:"address_id"`
	Number           sql.NullString  `json:"number"`
	Cep              string          `json:"cep"`
	Lat              sql.NullFloat64 `json:"lat"`
	Lon              sql.NullFloat64 `json:"lon"`
}

func (q *Queries) FindAddressesByLatLon(ctx context.Context, arg FindAddressesByLatLonParams) ([]FindAddressesByLatLonRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressesByLatLon, arg.Lat, arg.Lon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressesByLatLonRow
	for rows.Next() {
		var i FindAddressesByLatLonRow
		if err := rows.Scan(
			&i.StreetID,
			&i.StreetName,
			&i.NeighborhoodName,
			&i.NeighborhoodLat,
			&i.NeighborhoodLon,
			&i.CityName,
			&i.CityLat,
			&i.CityLon,
			&i.StateUf,
			&i.StateLat,
			&i.StateLon,
			&i.AddressID,
			&i.Number,
			&i.Cep,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAddressesByQuery = `-- name: FindAddressesByQuery :many
SELECT
    s.id AS street_id,
    s.name AS street_name,
    n.name AS neighborhood_name,
    n.lat AS neighborhood_lat,
    n.lon AS neighborhood_lon,
    c.name AS city_name,
    c.lat AS city_lat,
    c.lon AS city_lon,
    st.uf AS state_uf,
    st.lat AS state_lat,
    st.lon AS state_lon,
    a.id AS address_id,
    a.number,
    a.cep,
    a.lat,
    a.lon
FROM streets s
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
         LEFT JOIN addresses a ON a.street_id = s.id
WHERE
    (COALESCE(NULLIF($1, ''), NULLIF($2, ''), NULLIF($3, ''), NULLIF($4, '')) IS NOT NULL)
  AND (s.search_vector @@ plainto_tsquery('portuguese', $1) OR $1 = '')
  AND (c.search_vector @@ plainto_tsquery('portuguese', $2) OR $2 = '')
  AND (st.search_vector @@ plainto_tsquery('portuguese', $3) OR $3 = '')
  AND (n.search_vector @@ plainto_tsquery('portuguese', $4) OR $4 = '')
  AND ($5 = '' OR a.number ILIKE $5 || '%')
ORDER BY random()
limit 100
`

type FindAddressesByQueryParams struct {
	Street       interface{} `json:"street"`
	City         interface{} `json:"city"`
	State        interface{} `json:"state"`
	Neighborhood interface{} `json:"neighborhood"`
	Number       interface{} `json:"number"`
}

type FindAddressesByQueryRow struct {
	StreetID         int32           `json:"street_id"`
	StreetName       string          `json:"street_name"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	NeighborhoodLat  sql.NullFloat64 `json:"neighborhood_lat"`
	NeighborhoodLon  sql.NullFloat64 `json:"neighborhood_lon"`
	CityName         string          `json:"city_name"`
	CityLat          sql.NullFloat64 `json:"city_lat"`
	CityLon          sql.NullFloat64 `json:"city_lon"`
	StateUf          string          `json:"state_uf"`
	StateLat         sql.NullFloat64 `json:"state_lat"`
	StateLon         sql.NullFloat64 `json:"state_lon"`
	AddressID        sql.NullInt32   `json:"address_id"`
	Number           sql.NullString  `json:"number"`
	Cep              sql.NullString  `json:"cep"`
	Lat              sql.NullFloat64 `json:"lat"`
	Lon              sql.NullFloat64 `json:"lon"`
}

func (q *Queries) FindAddressesByQuery(ctx context.Context, arg FindAddressesByQueryParams) ([]FindAddressesByQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressesByQuery,
		arg.Street,
		arg.City,
		arg.State,
		arg.Neighborhood,
		arg.Number,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressesByQueryRow
	for rows.Next() {
		var i FindAddressesByQueryRow
		if err := rows.Scan(
			&i.StreetID,
			&i.StreetName,
			&i.NeighborhoodName,
			&i.NeighborhoodLat,
			&i.NeighborhoodLon,
			&i.CityName,
			&i.CityLat,
			&i.CityLon,
			&i.StateUf,
			&i.StateLat,
			&i.StateLon,
			&i.AddressID,
			&i.Number,
			&i.Cep,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCitiesByName = `-- name: FindCitiesByName :many
SELECT c.id, c.name, c.state_id, c.lat, c.lon, s.uf
FROM cities c
JOIN states s ON c.state_id = s.id
WHERE c.search_vector @@ plainto_tsquery('portuguese', $1)
`

type FindCitiesByNameRow struct {
	ID      int32           `json:"id"`
	Name    string          `json:"name"`
	StateID int32           `json:"state_id"`
	Lat     sql.NullFloat64 `json:"lat"`
	Lon     sql.NullFloat64 `json:"lon"`
	Uf      string          `json:"uf"`
}

func (q *Queries) FindCitiesByName(ctx context.Context, plaintoTsquery string) ([]FindCitiesByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, findCitiesByName, plaintoTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCitiesByNameRow
	for rows.Next() {
		var i FindCitiesByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StateID,
			&i.Lat,
			&i.Lon,
			&i.Uf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCityAll = `-- name: FindCityAll :many
select id, name, state_id, lat, lon from cities c where c.state_id = $1 order by name
`

func (q *Queries) FindCityAll(ctx context.Context, stateID int32) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, findCityAll, stateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StateID,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNeighborhoodsByName = `-- name: FindNeighborhoodsByName :many
SELECT n.id, n.name, n.city_id, n.lat, n.lon, c.name as city, s.uf
FROM neighborhoods n
JOIN cities c ON n.city_id = c.id
JOIN states s ON c.state_id = s.id
WHERE n.search_vector @@ plainto_tsquery('portuguese', $1)
`

type FindNeighborhoodsByNameRow struct {
	ID     int32           `json:"id"`
	Name   string          `json:"name"`
	CityID int32           `json:"city_id"`
	Lat    sql.NullFloat64 `json:"lat"`
	Lon    sql.NullFloat64 `json:"lon"`
	City   string          `json:"city"`
	Uf     string          `json:"uf"`
}

func (q *Queries) FindNeighborhoodsByName(ctx context.Context, plaintoTsquery string) ([]FindNeighborhoodsByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, findNeighborhoodsByName, plaintoTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindNeighborhoodsByNameRow
	for rows.Next() {
		var i FindNeighborhoodsByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CityID,
			&i.Lat,
			&i.Lon,
			&i.City,
			&i.Uf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findStateAll = `-- name: FindStateAll :many
select id, name, uf, lat, lon from states order by name
`

func (q *Queries) FindStateAll(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, findStateAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Uf,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findStatesByName = `-- name: FindStatesByName :many
SELECT id, name, uf, lat, lon
FROM states
WHERE search_vector @@ plainto_tsquery('portuguese', $1)
`

func (q *Queries) FindStatesByName(ctx context.Context, plaintoTsquery string) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, findStatesByName, plaintoTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Uf,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
