// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const findAddressGroupedByCEP = `-- name: FindAddressGroupedByCEP :many
SELECT
    c.name AS city_name,
    st.uf AS state_uf,
    n.name as neighborhood_name,
    s.name as street_name
FROM addresses a
         JOIN streets s ON a.street_id = s.id
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
WHERE a.cep = $1
GROUP BY c.name, st.uf,  n.name, s.name
LIMIT 5
`

type FindAddressGroupedByCEPRow struct {
	CityName         string         `json:"city_name"`
	StateUf          string         `json:"state_uf"`
	NeighborhoodName sql.NullString `json:"neighborhood_name"`
	StreetName       string         `json:"street_name"`
}

func (q *Queries) FindAddressGroupedByCEP(ctx context.Context, cep string) ([]FindAddressGroupedByCEPRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressGroupedByCEP, cep)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressGroupedByCEPRow
	for rows.Next() {
		var i FindAddressGroupedByCEPRow
		if err := rows.Scan(
			&i.CityName,
			&i.StateUf,
			&i.NeighborhoodName,
			&i.StreetName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAddressesByCEP = `-- name: FindAddressesByCEP :many
SELECT
    a.id AS address_id,
    s.name AS street_name,
    s.id AS street_id,
    n.name AS neighborhood_name,
    c.name AS city_name,
    st.uf AS state_uf,
    a.number,
    a.cep,
    a.lat,
    a.lon
FROM addresses a
         JOIN streets s ON a.street_id = s.id
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
WHERE a.cep = $1
limit 5
`

type FindAddressesByCEPRow struct {
	AddressID        int32           `json:"address_id"`
	StreetName       string          `json:"street_name"`
	StreetID         int32           `json:"street_id"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	CityName         string          `json:"city_name"`
	StateUf          string          `json:"state_uf"`
	Number           sql.NullString  `json:"number"`
	Cep              string          `json:"cep"`
	Lat              sql.NullFloat64 `json:"lat"`
	Lon              sql.NullFloat64 `json:"lon"`
}

func (q *Queries) FindAddressesByCEP(ctx context.Context, cep string) ([]FindAddressesByCEPRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressesByCEP, cep)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressesByCEPRow
	for rows.Next() {
		var i FindAddressesByCEPRow
		if err := rows.Scan(
			&i.AddressID,
			&i.StreetName,
			&i.StreetID,
			&i.NeighborhoodName,
			&i.CityName,
			&i.StateUf,
			&i.Number,
			&i.Cep,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAddressesByLatLon = `-- name: FindAddressesByLatLon :many
SELECT
    a.id AS address_id,
    s.name AS street_name,
    s.id AS street_id,
    n.name AS neighborhood_name,
    c.name AS city_name,
    st.uf AS state_uf,
    a.number,
    a.cep,
    a.lat,
    a.lon
FROM addresses a
         JOIN streets s ON a.street_id = s.id
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
ORDER BY (a.lat - $1) * (a.lat - $1) + (a.lon - $2) * (a.lon - $2) ASC
limit 5
`

type FindAddressesByLatLonParams struct {
	Lat sql.NullFloat64 `json:"lat"`
	Lon sql.NullFloat64 `json:"lon"`
}

type FindAddressesByLatLonRow struct {
	AddressID        int32           `json:"address_id"`
	StreetName       string          `json:"street_name"`
	StreetID         int32           `json:"street_id"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	CityName         string          `json:"city_name"`
	StateUf          string          `json:"state_uf"`
	Number           sql.NullString  `json:"number"`
	Cep              string          `json:"cep"`
	Lat              sql.NullFloat64 `json:"lat"`
	Lon              sql.NullFloat64 `json:"lon"`
}

func (q *Queries) FindAddressesByLatLon(ctx context.Context, arg FindAddressesByLatLonParams) ([]FindAddressesByLatLonRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressesByLatLon, arg.Lat, arg.Lon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressesByLatLonRow
	for rows.Next() {
		var i FindAddressesByLatLonRow
		if err := rows.Scan(
			&i.AddressID,
			&i.StreetName,
			&i.StreetID,
			&i.NeighborhoodName,
			&i.CityName,
			&i.StateUf,
			&i.Number,
			&i.Cep,
			&i.Lat,
			&i.Lon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAddressesByQuery = `-- name: FindAddressesByQuery :many
SELECT
    s.id AS street_id,
    s.name AS street_name,
    n.name AS neighborhood_name,
    c.name AS city_name,
    st.uf AS state_uf,
    a.id AS address_id,
    a.number,
    a.cep,
    a.lat,
    a.lon,
    ts_rank(s.search_vector, plainto_tsquery('portuguese', $1)) AS street_rank,
    ts_rank(c.search_vector, plainto_tsquery('portuguese', $2)) AS city_rank,
    ts_rank(st.search_vector, plainto_tsquery('portuguese', $3)) AS state_rank,
    ts_rank(n.search_vector, plainto_tsquery('portuguese', $4)) AS neighborhood_rank
FROM streets s
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
         LEFT JOIN addresses a ON a.street_id = s.id
WHERE
    (COALESCE(NULLIF($1, ''),
              NULLIF($2, ''),
              NULLIF($3, ''),
              NULLIF($4, '')) IS NOT NULL)
  AND (s.search_vector @@ plainto_tsquery('portuguese', $1) OR $1 = '')
  AND (c.search_vector @@ plainto_tsquery('portuguese', $2) OR $2 = '')
  AND (st.search_vector @@ plainto_tsquery('portuguese', $3) OR $3 = '')
  AND (n.search_vector @@ plainto_tsquery('portuguese', $4) OR $4 = '')
  AND ($5 = '' OR a.number ILIKE $5 || '%')
ORDER BY
    ts_rank(s.search_vector, plainto_tsquery('portuguese', $1)) +
    ts_rank(c.search_vector, plainto_tsquery('portuguese', $2)) +
    ts_rank(st.search_vector, plainto_tsquery('portuguese', $3)) +
    ts_rank(n.search_vector, plainto_tsquery('portuguese', $4)) DESC
LIMIT 5
`

type FindAddressesByQueryParams struct {
	Street       string      `json:"street"`
	City         string      `json:"city"`
	State        string      `json:"state"`
	Neighborhood string      `json:"neighborhood"`
	Number       interface{} `json:"number"`
}

type FindAddressesByQueryRow struct {
	StreetID         int32           `json:"street_id"`
	StreetName       string          `json:"street_name"`
	NeighborhoodName sql.NullString  `json:"neighborhood_name"`
	CityName         string          `json:"city_name"`
	StateUf          string          `json:"state_uf"`
	AddressID        sql.NullInt32   `json:"address_id"`
	Number           sql.NullString  `json:"number"`
	Cep              sql.NullString  `json:"cep"`
	Lat              sql.NullFloat64 `json:"lat"`
	Lon              sql.NullFloat64 `json:"lon"`
	StreetRank       float32         `json:"street_rank"`
	CityRank         float32         `json:"city_rank"`
	StateRank        float32         `json:"state_rank"`
	NeighborhoodRank float32         `json:"neighborhood_rank"`
}

func (q *Queries) FindAddressesByQuery(ctx context.Context, arg FindAddressesByQueryParams) ([]FindAddressesByQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, findAddressesByQuery,
		arg.Street,
		arg.City,
		arg.State,
		arg.Neighborhood,
		arg.Number,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAddressesByQueryRow
	for rows.Next() {
		var i FindAddressesByQueryRow
		if err := rows.Scan(
			&i.StreetID,
			&i.StreetName,
			&i.NeighborhoodName,
			&i.CityName,
			&i.StateUf,
			&i.AddressID,
			&i.Number,
			&i.Cep,
			&i.Lat,
			&i.Lon,
			&i.StreetRank,
			&i.CityRank,
			&i.StateRank,
			&i.NeighborhoodRank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCityAll = `-- name: FindCityAll :many
select id, name, state_id from cities c where c.state_id = $1 order by name
`

func (q *Queries) FindCityAll(ctx context.Context, stateID int32) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, findCityAll, stateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.Name, &i.StateID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findStateAll = `-- name: FindStateAll :many
select id, name, uf from states order by name
`

func (q *Queries) FindStateAll(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, findStateAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.ID, &i.Name, &i.Uf); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findStreetsByQuery = `-- name: FindStreetsByQuery :many
SELECT
    s.id AS street_id,
    s.name AS street_name,
    n.name AS neighborhood_name,
    c.name AS city_name,
    st.uf AS state_uf,
    ts_rank(s.search_vector, plainto_tsquery('portuguese', $1)) AS street_rank,
    ts_rank(c.search_vector, plainto_tsquery('portuguese', $2)) AS city_rank,
    ts_rank(st.search_vector, plainto_tsquery('portuguese', $3)) AS state_rank,
    ts_rank(n.search_vector, plainto_tsquery('portuguese', $4)) AS neighborhood_rank
FROM streets s
         LEFT JOIN neighborhoods n ON s.neighborhood_id = n.id
         JOIN cities c ON n.city_id = c.id
         JOIN states st ON c.state_id = st.id
WHERE
    (COALESCE(NULLIF($1, ''),
              NULLIF($2, ''),
              NULLIF($3, ''),
              NULLIF($4, '')) IS NOT NULL)
  AND (s.search_vector @@ plainto_tsquery('portuguese', $1) OR $1 = '')
  AND (c.search_vector @@ plainto_tsquery('portuguese', $2) OR $2 = '')
  AND (st.search_vector @@ plainto_tsquery('portuguese', $3) OR $3 = '')
  AND (n.search_vector @@ plainto_tsquery('portuguese', $4) OR $4 = '')
ORDER BY
    ts_rank(s.search_vector, plainto_tsquery('portuguese', $1)) +
    ts_rank(c.search_vector, plainto_tsquery('portuguese', $2)) +
    ts_rank(st.search_vector, plainto_tsquery('portuguese', $3)) +
    ts_rank(n.search_vector, plainto_tsquery('portuguese', $4)) DESC
LIMIT 5
`

type FindStreetsByQueryParams struct {
	Street       string `json:"street"`
	City         string `json:"city"`
	State        string `json:"state"`
	Neighborhood string `json:"neighborhood"`
}

type FindStreetsByQueryRow struct {
	StreetID         int32          `json:"street_id"`
	StreetName       string         `json:"street_name"`
	NeighborhoodName sql.NullString `json:"neighborhood_name"`
	CityName         string         `json:"city_name"`
	StateUf          string         `json:"state_uf"`
	StreetRank       float32        `json:"street_rank"`
	CityRank         float32        `json:"city_rank"`
	StateRank        float32        `json:"state_rank"`
	NeighborhoodRank float32        `json:"neighborhood_rank"`
}

func (q *Queries) FindStreetsByQuery(ctx context.Context, arg FindStreetsByQueryParams) ([]FindStreetsByQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, findStreetsByQuery,
		arg.Street,
		arg.City,
		arg.State,
		arg.Neighborhood,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindStreetsByQueryRow
	for rows.Next() {
		var i FindStreetsByQueryRow
		if err := rows.Scan(
			&i.StreetID,
			&i.StreetName,
			&i.NeighborhoodName,
			&i.CityName,
			&i.StateUf,
			&i.StreetRank,
			&i.CityRank,
			&i.StateRank,
			&i.NeighborhoodRank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isCity = `-- name: IsCity :one
SELECT EXISTS(
    SELECT 1
    FROM cities
    WHERE search_vector @@ plainto_tsquery('portuguese', $1)
) AS is_city
`

func (q *Queries) IsCity(ctx context.Context, plaintoTsquery string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCity, plaintoTsquery)
	var is_city bool
	err := row.Scan(&is_city)
	return is_city, err
}

const isNeighborhood = `-- name: IsNeighborhood :one
SELECT EXISTS(
    SELECT 1
    FROM neighborhoods
    WHERE search_vector @@ plainto_tsquery('portuguese', $1)
) AS is_neighborhood
`

func (q *Queries) IsNeighborhood(ctx context.Context, plaintoTsquery string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isNeighborhood, plaintoTsquery)
	var is_neighborhood bool
	err := row.Scan(&is_neighborhood)
	return is_neighborhood, err
}

const isState = `-- name: IsState :one
SELECT EXISTS(
    SELECT 1
    FROM states
    WHERE search_vector @@ plainto_tsquery('portuguese', $1)
) AS is_state
`

func (q *Queries) IsState(ctx context.Context, plaintoTsquery string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isState, plaintoTsquery)
	var is_state bool
	err := row.Scan(&is_state)
	return is_state, err
}
